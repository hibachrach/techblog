<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://challahscript.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://challahscript.com/" rel="alternate" type="text/html" /><updated>2025-01-09T22:46:14-08:00</updated><id>https://challahscript.com/feed.xml</id><title type="html">ChallahScript</title><subtitle>Hazel Bachrach&apos;s technical blog. Should include some dumb and not-so-dumb stuff about software engineering.</subtitle><entry><title type="html">What I Wish Someone Told Me About Postgres</title><link href="https://challahscript.com/what_i_wish_someone_told_me_about_postgres" rel="alternate" type="text/html" title="What I Wish Someone Told Me About Postgres" /><published>2024-11-11T00:00:00-08:00</published><updated>2024-11-11T00:00:00-08:00</updated><id>https://challahscript.com/what_i_wish_someone_told_me_about_postgres</id><content type="html" xml:base="https://challahscript.com/what_i_wish_someone_told_me_about_postgres"><![CDATA[<p>I’ve been working professionally for the better part of a decade on web apps and, in that time, I’ve had to learn how to use a lot of different systems and tools.
During that education, I found that the official documentation typically proved to be the most helpful.</p>

<p>Except…Postgres.
It’s not because the official docs aren’t stellar (they are!)–they’re just <em>massive</em>.
For the current version (17 at the time of writing), if <a href="https://www.postgresql.org/files/documentation/pdf/17/postgresql-17-US.pdf">printed as a standard PDF on US letter-sized paper</a>, it’s 3,200 pages long.<sup id="fnref:a4_correction" role="doc-noteref"><a href="#fn:a4_correction" class="footnote" rel="footnote">1</a></sup>
It’s not something any junior engineer can just sit down and read start to finish.</p>

<p>So I want to try to catalog the bits that I wish someone had just told me before working with a Postgres database. 
Hopefully, this makes things easier for the next person going on a journey similar to mine.</p>

<p>Note that many of these things may also apply to other SQL database management systems (DBMSs) or other databases more generally,
but I’m not as familiar with others so I’m not sure what does and does not apply.</p>

<h2 id="normalize-your-data-unless-you-have-a-good-reason-not-to">Normalize your data unless you have a good reason not to</h2>

<p>Database normalization is the process of removing duplicate or redundant data from a <a href="https://en.wikipedia.org/wiki/Database_schema">database schema</a>.
For example, say you have a site where users can upload documents and users can subscribe to email notifications when folks view their documents.
If you have a <code class="language-plaintext highlighter-rouge">documents</code> table, you shouldn’t have a <code class="language-plaintext highlighter-rouge">user_email</code> column on said table:
When a user wants to change their email, you shouldn’t have to update the hundreds of rows for all the documents they’ve uploaded.
Instead, you can have each row in <code class="language-plaintext highlighter-rouge">documents</code> represent a row in another table (e.g. <code class="language-plaintext highlighter-rouge">users</code>) with a foreign key (e.g. <code class="language-plaintext highlighter-rouge">user_id</code>).</p>

<p>If you search for “database normalization” online, you’ll find a bunch of results about “1st normal form” and the like.
You definitely don’t need to know what each of those <a href="https://en.wikipedia.org/wiki/Database_normalization#Normal_forms">“normal forms”</a> are,
but <a href="https://en.wikipedia.org/wiki/Database_normalization#Example_of_a_step-by-step_normalization">the general process</a> is good to be familiar with as it can lead you to a more maintainable database schema.</p>

<p>There are occasions when having redundant data (that is, <a href="https://en.wikipedia.org/wiki/Denormalization">denormalizing your schema</a>) can make sense:
this is typically to make reading certain data faster so it doesn’t have to be recomputed every time it’s requested.
E.g. you have an application that manages employee shifts at a bakery.
A user might want to see how many hours they’ve worked so far this year.
To calculate that, you would need to do something like determine the duration of each of their shifts and then sum all of them together.
It might make sense to instead calculate this amount on a regular interval or whenever the number of hours worked changes.
This data can be denormalized within the Postgres database or outside of it (e.g. in a caching layer like Redis).
Note that there is almost always a cost to denormalized data,
whether that’s possible data inconsistency or increased write complexity.</p>

<h2 id="follow-all-the-advice-from-the-folks-that-make-postgres">Follow all the advice from the folks that make Postgres</h2>

<p>There’s a big list aptly titled <a href="https://wiki.postgresql.org/wiki/Don%27t_Do_This">“Don’t do this”</a> on the official Postgres wiki.
You may not understand all of the things listed.
That’s fine!
If you don’t understand, then you probably won’t make the mistake.
Some suggestions worth highlighting:</p>
<ol>
  <li><a href="https://wiki.postgresql.org/wiki/Don%27t_Do_This#Text_storage">Just use the <code class="language-plaintext highlighter-rouge">text</code> type for all text storage</a></li>
  <li><a href="https://wiki.postgresql.org/wiki/Don%27t_Do_This#Date.2FTime_storage">Just use the <code class="language-plaintext highlighter-rouge">timestampz</code>/<code class="language-plaintext highlighter-rouge">time with time zone</code> type for all timestamp storage</a></li>
  <li><a href="https://wiki.postgresql.org/wiki/Don%27t_Do_This#Don.27t_use_upper_case_table_or_column_names">Name your tables in snake_case</a></li>
</ol>

<h2 id="note-some-general-sql-eccentricities">Note some general SQL eccentricities</h2>
<h3 id="saving-your-pinkies-you-dont-have-to-write-sql-in-all-caps">Saving your pinkies: you don’t have to write SQL in all caps</h3>

<p>In most documentation and tutorials, you’ll see SQL written like so:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">my_table</span> <span class="k">WHERE</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">AND</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<p>The case for SQL keywords does not matter.
That means the snippet above is the same as this:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">my_table</span> <span class="k">where</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">and</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="k">limit</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>
<p>or this:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">from</span> <span class="n">my_table</span> <span class="k">WHERE</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">and</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>
<p>As far as I know, this is not specific to Postgres.
Your pinkies will thank you.</p>

<h3 id="null-is-weird"><code class="language-plaintext highlighter-rouge">NULL</code> is weird</h3>

<p>You’re probably familiar with <code class="language-plaintext highlighter-rouge">null</code> or <code class="language-plaintext highlighter-rouge">nil</code> values from other programming languages.
SQL’s <code class="language-plaintext highlighter-rouge">NULL</code> is not like that.
<code class="language-plaintext highlighter-rouge">NULL</code> is really more accurately an “unknown”.
E.g. <code class="language-plaintext highlighter-rouge">NULL = NULL</code> returns <code class="language-plaintext highlighter-rouge">NULL</code> (because it’s unknown if one unknown equals another unknown!)
This is true for almost any operator, not just <code class="language-plaintext highlighter-rouge">=</code>(we’ll go through some of the exceptions in a moment):
if one side of the comparison is <code class="language-plaintext highlighter-rouge">NULL</code>, the result will be <code class="language-plaintext highlighter-rouge">NULL</code>.</p>

<p>There are a few operators that you can use to compare against <code class="language-plaintext highlighter-rouge">NULL</code> which don’t result in <code class="language-plaintext highlighter-rouge">NULL</code>:</p>

<table>
  <thead>
    <tr>
      <th>Operation</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">x IS NULL</code></td>
      <td>returns <code class="language-plaintext highlighter-rouge">true</code> if <code class="language-plaintext highlighter-rouge">x</code> evaluates to <code class="language-plaintext highlighter-rouge">NULL</code>, <code class="language-plaintext highlighter-rouge">false</code> otherwise</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">x IS NOT NULL</code></td>
      <td>returns <code class="language-plaintext highlighter-rouge">true</code> if <code class="language-plaintext highlighter-rouge">x</code> does not evaluate to <code class="language-plaintext highlighter-rouge">NULL</code>, <code class="language-plaintext highlighter-rouge">false</code> otherwise</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">x IS NOT DISTINCT FROM y</code></td>
      <td>the same as <code class="language-plaintext highlighter-rouge">x = y</code> but <code class="language-plaintext highlighter-rouge">NULL</code> is treated as a normal value</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">x IS DISTINCT FROM y</code></td>
      <td>the same as <code class="language-plaintext highlighter-rouge">x != y</code>/<code class="language-plaintext highlighter-rouge">x &lt;&gt; y</code> but <code class="language-plaintext highlighter-rouge">NULL</code> is treated as a normal value</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">WHERE</code> clauses only match if the condition evaluates to <code class="language-plaintext highlighter-rouge">true</code>.
This means that a query like <code class="language-plaintext highlighter-rouge">SELECT * FROM users WHERE title != 'manager'</code> won’t return rows where <code class="language-plaintext highlighter-rouge">title</code> is <code class="language-plaintext highlighter-rouge">NULL</code> because <code class="language-plaintext highlighter-rouge">NULL != 'manager'</code> is <code class="language-plaintext highlighter-rouge">NULL</code>.</p>

<p>Another useful function when attempting to wrangle <code class="language-plaintext highlighter-rouge">NULL</code> is <code class="language-plaintext highlighter-rouge">COALESCE</code>:
<code class="language-plaintext highlighter-rouge">COALESCE</code> will take any number of arguments and return the first one that is not <code class="language-plaintext highlighter-rouge">NULL</code>:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">COALESCE</span><span class="p">(</span><span class="k">NULL</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">COALESCE</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="k">NULL</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">COALESCE</span><span class="p">(</span><span class="k">NULL</span><span class="p">,</span> <span class="k">NULL</span><span class="p">)</span> <span class="k">IS</span> <span class="k">NULL</span>
</code></pre></div></div>

<h2 id="you-can-make-psql-more-useful">You can make <code class="language-plaintext highlighter-rouge">psql</code> more useful</h2>

<h3 id="fix-your-unreadable-output">Fix your unreadable output</h3>
<p>Have you ever done a query on a table with many columns or long values in those columns and the output is basically unreadable?
It’s probably because you don’t have the pager enabled.
A <a href="https://en.wikipedia.org/wiki/Terminal_pager">terminal pager</a> allows you to view a file (or table, in the case of <code class="language-plaintext highlighter-rouge">psql</code>) of text by scrolling a viewport around some larger canvas.
Without a pager, it just dumps the text in your terminal, wrapping to a new line wherever it runs out of space.</p>

<p><code class="language-plaintext highlighter-rouge">less</code> is a decent pager available on any Unix-like system.
You can set it as your pager by setting the environment variable in your <code class="language-plaintext highlighter-rouge">~/.bashrc</code>/<code class="language-plaintext highlighter-rouge">~/.zshrc</code>/etc.:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Use the `-S` option so it truncates long lines for scrolling instead of wrapping them</span>
<span class="nb">export </span><span class="nv">PAGER</span><span class="o">=</span><span class="s1">'less -S'</span>
</code></pre></div></div>

<p>Sometimes, even viewing things as a properly formatted table isn’t particularly useful, especially with tables with <em>many</em> columns.
For this, you can switch to “expanded” mode with <code class="language-plaintext highlighter-rouge">\pset expanded</code> (or the shortcut <code class="language-plaintext highlighter-rouge">\x</code>) in your <code class="language-plaintext highlighter-rouge">psql</code> session.
If you want to have this as the default, you can add a file called <code class="language-plaintext highlighter-rouge">.psqlrc</code> to your home directory (i.e. <code class="language-plaintext highlighter-rouge">~/.psqlrc</code>) and add <code class="language-plaintext highlighter-rouge">\x</code> to it.
Any time you start up a <code class="language-plaintext highlighter-rouge">psql</code> session, it’ll run all the commands in that file first.</p>

<h3 id="clarify-ambiguous-nulls">Clarify ambiguous nulls</h3>

<p>It’s <em>very</em> important to know when a value is <code class="language-plaintext highlighter-rouge">NULL</code> in an output, but the default settings don’t make that particularly clear.
You can give <code class="language-plaintext highlighter-rouge">psql</code> a string to output when it’s referring to <code class="language-plaintext highlighter-rouge">NULL</code>.
I have it set to <code class="language-plaintext highlighter-rouge">[NULL]</code> by running</p>
<pre><code class="language-psql">\pset null '[NULL]'
</code></pre>
<p>Any Unicode string is fine!
It’s a bit past spooky season, but you can be like my friend <a href="https://stevenharman.net">Steven Harman</a> and set it to “👻”.</p>

<p>Once again, if you want to have this as the default, you can add a file called <code class="language-plaintext highlighter-rouge">.psqlrc</code> to your home directory (i.e. <code class="language-plaintext highlighter-rouge">~/.psqlrc</code>) and add <code class="language-plaintext highlighter-rouge">\pset null '[NULL]'</code> to it.
Any time you start up a <code class="language-plaintext highlighter-rouge">psql</code> session, it’ll run all the commands in that file first.</p>

<h3 id="use-auto-completion">Use auto-completion</h3>

<p><code class="language-plaintext highlighter-rouge">psql</code>, like many interactive consoles, will allow for auto-completion.
It helps that SQL is a fairly rigid and fairly structured language.
You can just start typing most keywords or table names and hit <kbd>Tab</kbd> and let <code class="language-plaintext highlighter-rouge">psql</code> fill out the rest:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- start typing "SEL"</span>
<span class="n">SEL</span>
<span class="c1">-- ^ hit `Tab`</span>
<span class="k">SELECT</span>
</code></pre></div></div>

<h3 id="lean-on-backslash-shortcuts">Lean on backslash shortcuts</h3>

<p>There are a whole bunch of useful shortcut commands in <code class="language-plaintext highlighter-rouge">psql</code> for looking up stuff, command line editing, and more.</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>What it does</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\?</code></td>
      <td>List all of the shortcuts</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\d</code></td>
      <td>Shows list of relations (tables and sequences) as well as said relation’s owner</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\d+</code></td>
      <td>Same as <code class="language-plaintext highlighter-rouge">\d</code> but also includes the size and some other metadata</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\d table_name</code></td>
      <td>Shows the schema of a table (list of columns, including said column’s type, nullability, and default) as well as any indexes or foreign key constraints on said table</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\e</code></td>
      <td>Opens your default editor (set as the <code class="language-plaintext highlighter-rouge">$EDITOR</code> environment variable) to edit your query there</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">\h SQL_KEYWORD</code></td>
      <td>Get syntax and link to docs for <code class="language-plaintext highlighter-rouge">SQL_KEYWORD</code></td>
    </tr>
  </tbody>
</table>

<p>There are a ton of these and the table above only scratches the surface.</p>

<h3 id="copy-to-a-csv">Copy to a CSV</h3>

<p>Sometimes, you just want to share the output of a command with someone who wants to put it in Excel or something.
In Postgres, it’s actually really easy to copy the output of any query to a CSV on your local machine<sup id="fnref:copy_permissions" role="doc-noteref"><a href="#fn:copy_permissions" class="footnote" rel="footnote">2</a></sup>:</p>

<pre><code class="language-psql">\copy (select * from some_table) to 'my_file.csv' CSV
</code></pre>
<p>If you want it to include an initial line with all the column names, you can add the <code class="language-plaintext highlighter-rouge">HEADER</code> option:</p>
<pre><code class="language-psql">\copy (select * from some_table) to 'my_file.csv' CSV HEADER
</code></pre>
<p>For way more information (including how to get it to do the reverse: insert rows from data in a CSV!), check out <a href="https://www.postgresql.org/docs/current/app-psql.html#APP-PSQL-META-COMMANDS-COPY">the docs on this command</a>.</p>

<h3 id="use-column-shorthands-and-aliases">Use column shorthands and aliases</h3>

<p>When doing a <code class="language-plaintext highlighter-rouge">SELECT</code> statement in <code class="language-plaintext highlighter-rouge">psql</code>, you can re-title each of the output columns to whatever you want (an “alias”) with the <code class="language-plaintext highlighter-rouge">AS</code> keyword:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">vendor</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">AS</span> <span class="n">number_of_backpacks</span> <span class="k">FROM</span> <span class="n">backpacks</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">vendor</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">number_of_backpacks</span> <span class="k">DESC</span><span class="p">;</span> 
</code></pre></div></div>

<p>This will also rename the column in the output.</p>

<p>What’s more is that <code class="language-plaintext highlighter-rouge">GROUP BY</code> and <code class="language-plaintext highlighter-rouge">ORDER BY</code> have their own nice shorthand as well:
you can reference output columns by the number they appear after <code class="language-plaintext highlighter-rouge">SELECT</code>.
Therefore, you can write the previous query as</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">vendor</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">AS</span> <span class="n">number_of_backpacks</span> <span class="k">FROM</span> <span class="n">backpacks</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">1</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">2</span> <span class="k">DESC</span><span class="p">;</span> 
</code></pre></div></div>

<p>While useful, don’t put this in any queries that you ship to production–your future self will thank you!</p>

<h2 id="its-possible-that-adding-an-index-will-do-nothing-particularly-if-its-misconfigured">It’s possible that adding an index will do nothing (particularly if it’s misconfigured)</h2>

<h3 id="what-is-an-index">What is an index?</h3>

<p>An index is a data structure intended to help with looking up data–giving Postgres the responsibility of maintaining a “shortcut directory” to a table’s rows by various fields.
By far the most common kind is a <a href="https://www.baeldung.com/cs/b-tree-data-structure">B-tree</a> index, which is a kind of search tree that work for both exact equality conditions (e.g. <code class="language-plaintext highlighter-rouge">WHERE a = 3</code>) as well as range conditions (e.g. <code class="language-plaintext highlighter-rouge">WHERE a &gt; 5</code>).</p>

<p>But you can’t tell Postgres to use a specific index.
It needs to predict (using statistics it maintains for each table) that it’ll be faster than just reading the table from top to bottom to find the relevant data
(known as a “sequential scan” or “seq. scan”–pronounced “seek scan”–for short).
You can see how Postgres is planning on executing a query by adding <code class="language-plaintext highlighter-rouge">EXPLAIN</code> before your <code class="language-plaintext highlighter-rouge">SELECT ... FROM ...</code>.
This will give you a “query plan”: a plan for how Postgres is going to find the data and its estimate for how much work each task will take.
There are many good guides for reading the output of these query plans like <a href="https://thoughtbot.com/blog/reading-an-explain-analyze-query-plan">this one from thoughtbot</a> or <a href="https://pganalyze.com/docs/explain">this one from pganalyze</a>.
<a href="https://www.postgresql.org/docs/current/using-explain.html">The official docs</a> are also a good reference (albeit a bit overwhelming for a newbie).
For analyzing query plans, I’ve found <a href="https://explain.depesz.com/">this tool</a> to often be very helpful</p>

<h3 id="an-index-isnt-much-use-for-a-table-with-barely-any-rows-in-it">An index isn’t much use for a table with barely any rows in it</h3>

<p>This is particularly important when doing development on your local database.
Chances are, you don’t have millions of rows in your local database.
Postgres may find that it’s faster just to do a seq. scan rather than use the index at all if it’s just dealing with 100 rows.</p>

<h3 id="when-indexing-multiple-columns-the-order-matters">When indexing multiple columns, the order matters</h3>

<p>Postgres supports multicolumn indexes which do what you might expect:
if you create an index on columns <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code> like so:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">CONCURRENTLY</span> <span class="k">ON</span> <span class="n">tbl</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</code></pre></div></div>

<p>then a <code class="language-plaintext highlighter-rouge">WHERE</code> clause like</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">tbl</span> <span class="k">WHERE</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">AND</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</code></pre></div></div>
<p>will be faster than if two separate indexes were created for <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code> respectively.
This is because in one multicolumn index, Postgres just needs to traverse one B-tree which is able to efficiently combine the constraints of the search query.</p>

<p>This index speeds up queries filtering against just <code class="language-plaintext highlighter-rouge">a</code> just as much as an index against <code class="language-plaintext highlighter-rouge">a</code> alone.</p>

<p>But what about a query like <code class="language-plaintext highlighter-rouge">SELECT * FROM tbl WHERE b = 5;</code>?
Is that faster too?
Possibly, but not as fast as it could be.
It turns out the above index does <em>not</em> obviate the need for an index on <code class="language-plaintext highlighter-rouge">b</code> alone.
That’s because the B-tree in the index is first keyed on <code class="language-plaintext highlighter-rouge">a</code> and secondarily keyed on <code class="language-plaintext highlighter-rouge">b</code>.
So it will need to traverse all of the <code class="language-plaintext highlighter-rouge">a</code> values in the index to find all of the <code class="language-plaintext highlighter-rouge">b</code> values in the index.
Often if you need to use any combination of columns for you queries,
you’ll want to have indexes for both <code class="language-plaintext highlighter-rouge">(a, b)</code> as well as <code class="language-plaintext highlighter-rouge">b</code> alone.
That said, you may be able to rely on indexes on <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code> separately,
depending on your needs.</p>

<h3 id="if-doing-prefix-matches-use-text_pattern_ops">If doing prefix matches, use <code class="language-plaintext highlighter-rouge">text_pattern_ops</code></h3>

<p>Let’s say you’re storing a hierarchical system of directories in your database using a <a href="https://www.slideshare.net/slideshow/models-for-hierarchical-data/4179181#18">materialized path approach</a> (where you store a list of all of a row’s ancestors’ ids in each row) and for some part of your application you need to get all descendant directories.
So you need to query a table to find all rows where a column matches some common prefix:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- % is a wildcard: the `WHERE` clause here is asking for `directories` where `path` starts with '/1/2/3/'</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">directories</span> <span class="k">WHERE</span> <span class="n">path</span> <span class="k">LIKE</span> <span class="s1">'/1/2/3/%'</span>
</code></pre></div></div>

<p>To keep things speedy, you add an index to the <code class="language-plaintext highlighter-rouge">path</code> column of <code class="language-plaintext highlighter-rouge">directories</code>:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">CONCURRENTLY</span> <span class="k">ON</span> <span class="n">directories</span> <span class="p">(</span><span class="n">path</span><span class="p">);</span>
</code></pre></div></div>

<p>Unfortunately, this may not be used:
Most kinds of indexes
(including the default B-tree index implicitly created in the <code class="language-plaintext highlighter-rouge">CREATE INDEX</code> statement above)
depend on the ordering of values to work.
To make Postgres able to do the basic character-by-character sorting that you need for this sort of prefix matching or pattern matching in general,
you need to give it a different <a href="https://www.postgresql.org/docs/current/indexes-opclass.html">“operator class”</a> when defining the index:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">CONCURRENTLY</span> <span class="k">ON</span> <span class="n">directories</span> <span class="p">(</span><span class="n">path</span> <span class="n">text_pattern_ops</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="long-held-locks-can-break-your-app-even-access-share">Long-held locks can break your app (even <code class="language-plaintext highlighter-rouge">ACCESS SHARE</code>)</h2>

<h3 id="what-is-a-lock">What is a lock?</h3>
<p>A “lock” or “mutex” (short for “mutual exclusion”) ensures only one client can do something dangerous at a time.
This is a concept you’ll see in a lot of places but they’re particularly important in Postgres, as in any database, because updating an individual entity (whether that’s a row, table, view, etc.) must entirely succeed or entirely fail.
One way that operations could only partially succeed is if two different clients/processes were attempting to perform them at the same time.
As a result, any operation will need to acquire a “lock” on the relevant entity.</p>

<h3 id="how-locks-work-in-postgres">How locks work in Postgres</h3>
<p>In Postgres, there are several different locking levels for tables which are more or less restrictive.
Here’s just a few in order of less to more restrictive:</p>

<table>
  <thead>
    <tr>
      <th>Lock Mode</th>
      <th>Example Statements</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ACCESS SHARE</code></td>
      <td><code class="language-plaintext highlighter-rouge">SELECT</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ROW SHARE</code></td>
      <td><code class="language-plaintext highlighter-rouge">SELECT ... FOR UPDATE</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ROW EXCLUSIVE</code></td>
      <td><code class="language-plaintext highlighter-rouge">UPDATE</code>, <code class="language-plaintext highlighter-rouge">DELETE</code>, <code class="language-plaintext highlighter-rouge">INSERT</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">SHARE UPDATE EXCLUSIVE</code></td>
      <td><code class="language-plaintext highlighter-rouge">CREATE INDEX CONCURRENTLY</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">SHARE</code></td>
      <td><code class="language-plaintext highlighter-rouge">CREATE INDEX</code> (not <code class="language-plaintext highlighter-rouge">CONCURRENTLY</code>)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ACCESS EXCLUSIVE</code></td>
      <td>Many forms of <code class="language-plaintext highlighter-rouge">ALTER TABLE</code> and <code class="language-plaintext highlighter-rouge">ALTER INDEX</code></td>
    </tr>
  </tbody>
</table>

<p>And here’s how they conflict (X means they are conflicting):</p>

<div class="scrollable-wrapper-x-mobile">
  <table class="table" summary="Conflicting Lock Modes">
    <colgroup>
      <col />
      <col />
      <col />
      <col />
      <col />
      <col />
      <col />
    </colgroup>
    <thead>
      <tr>
        <th rowspan="2">Requested Lock Mode</th>
        <th colspan="8" align="center">Existing Lock Mode</th>
      </tr>
      <tr>
        <th><code>ACCESS SHARE</code></th>
        <th><code>ROW SHARE</code></th>
        <th><code>ROW EXCL.</code></th>
        <th><code>SHARE UPDATE EXCL.</code></th>
        <th><code>SHARE</code></th>
        <th><code>ACCESS EXCL.</code></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>ACCESS SHARE</code></td>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
        <td align="center">X</td>
      </tr>
      <tr>
        <td><code>ROW SHARE</code></td>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
        <td align="center">X</td>
      </tr>
      <tr>
        <td><code>ROW EXCL.</code></td>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
        <td align="center">X</td>
        <td align="center">X</td>
      </tr>
      <tr>
        <td><code>SHARE UPDATE EXCL.</code></td>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
        <td align="center">X</td>
        <td align="center">X</td>
        <td align="center">X</td>
      </tr>
      <tr>
        <td><code>SHARE</code></td>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
        <td align="center">X</td>
        <td align="center">X</td>
        <td align="center">&nbsp;</td>
        <td align="center">X</td>
      </tr>
      <tr>
        <td><code>ACCESS EXCL.</code></td>
        <td align="center">X</td>
        <td align="center">X</td>
        <td align="center">X</td>
        <td align="center">X</td>
        <td align="center">X</td>
        <td align="center">X</td>
      </tr>
    </tbody>
  </table>
</div>

<p>For example consider the following for a single table:</p>

<table>
  <thead>
    <tr>
      <th>Client 1 is doing…</th>
      <th>Client 2 wants to do a …</th>
      <th>Can Client 2 start?</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">UPDATE</code></td>
      <td><code class="language-plaintext highlighter-rouge">SELECT</code></td>
      <td>✅ <strong>Yes</strong></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">UPDATE</code></td>
      <td><code class="language-plaintext highlighter-rouge">CREATE INDEX CONCURRENTLY</code></td>
      <td>🚫 <strong>No, must wait</strong></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">SELECT</code></td>
      <td><code class="language-plaintext highlighter-rouge">CREATE INDEX</code></td>
      <td>✅ <strong>Yes</strong></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">SELECT</code></td>
      <td><code class="language-plaintext highlighter-rouge">ALTER TABLE</code></td>
      <td>🚫 <strong>No, must wait</strong><sup id="fnref:alter_table_special_cases" role="doc-noteref"><a href="#fn:alter_table_special_cases" class="footnote" rel="footnote">3</a></sup></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ALTER TABLE</code></td>
      <td><code class="language-plaintext highlighter-rouge">SELECT</code></td>
      <td>🚫 <strong>No, must wait</strong><sup id="fnref:alter_table_special_cases:1" role="doc-noteref"><a href="#fn:alter_table_special_cases" class="footnote" rel="footnote">3</a></sup></td>
    </tr>
  </tbody>
</table>

<p>For a full list of all of this information, look at <a href="https://www.postgresql.org/docs/current/explicit-locking.html#LOCKING-TABLES">the official documentation</a>.
<a href="https://postgres-locks.husseinnasser.com/">This guide</a> is also a great reference to see what conflicts with what on an operation-by-operation basis (which is typically what you’re thinking about, instead of lock levels).</p>

<h3 id="how-this-can-cause-problems">How this can cause problems</h3>

<p>In the previous section, we noted that an if one client is performing an <code class="language-plaintext highlighter-rouge">ALTER TABLE</code> statement, that can block a <code class="language-plaintext highlighter-rouge">SELECT</code> from running.
This can be just as bad as it sounds if the <code class="language-plaintext highlighter-rouge">ALTER TABLE</code> statement takes a long time.
If you’re updating a core table (e.g. <code class="language-plaintext highlighter-rouge">users</code>, one that all requests for your web app may need to reference) all <code class="language-plaintext highlighter-rouge">SELECT</code>s reading from that table will just be waiting.
Before timing out, of course, causing your app to return 503s.</p>

<p>Common recipes for slow <code class="language-plaintext highlighter-rouge">ALTER TABLE</code> statements include</p>
<ul>
  <li>Adding a column with a non-constant default<sup id="fnref:default_changes" role="doc-noteref"><a href="#fn:default_changes" class="footnote" rel="footnote">4</a></sup>
    <ul>
      <li>In my experience this is by far the most common cause of slowness</li>
    </ul>
  </li>
  <li>Changing a column’s type</li>
  <li>Adding a uniqueness constraint</li>
</ul>

<p>So, let’s say you’re adding a new column to a heavily used table. 
You aren’t doing anything silly with your <code class="language-plaintext highlighter-rouge">ALTER TABLE</code> statements.
Sure, you’re adding a new column, but it doesn’t have a variable default.
This can still break your app.</p>

<p>See, that <code class="language-plaintext highlighter-rouge">ALTER TABLE</code> statement <em>will</em> be fast…once it acquires the lock.
But say that, years ago, you made some internal dashboard that does periodic queries against that table.
Over time, that query got slower and slower.
What once took milliseconds now takes minutes.
Which is normally fine–it’s just a <code class="language-plaintext highlighter-rouge">SELECT</code> statement after all.
But if your <code class="language-plaintext highlighter-rouge">ALTER TABLE</code> statement gets executed while one of those is running, it will have to wait.</p>

<p>That all probably isn’t too surprising.
But you might find this a bit surprising:
Any subsequent statements querying that table will have to wait, too.
That’s because Postgres locks form a queue:</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiJSV7aW5pdDogeyd0aGVtZSc6J2RhcmsnfX0lJVxuZmxvd2NoYXJ0IEJUXG5zdWJncmFwaCBDdXJyZW50bHkgRXhlY3V0aW5nXG5uMFtcIlNFTEVDVCAuLi4gRlJPTSAuLi4gdXNlcnMgLi4uIDtcbkhvbGRpbmcgQUNDRVNTIFNIQVJFO1xuTG9jayBBY3F1aXJlZCBhdCB0aW1lIHQ9MFxu8J-QjCA8dT4qKipTTE9XKioqPC91PiDwn5CMXCJdXG5uMVtcIlNFTEVDVCAuLi4gRlJPTSAuLi4gdXNlcnMgLi4uIDtcbkhvbGRpbmcgQUNDRVNTIFNIQVJFO1xuTG9jayBBY3F1aXJlZCBhdCB0aW1lIHQ9MVwiXVxuZW5kXG5uMltcIkFMVEVSIFRBQkxFIHVzZXJzIC4uLiA7XG5SZXF1ZXN0aW5nIEFDQ0VTUyBFWENMVVNJVkU7XG5Mb2NrIFJlcXVlc3RlZCBhdCB0aW1lIHQ9MlwiXVxubjNbXCJTRUxFQ1QgLi4uIEZST00gLi4uIHVzZXJzIC4uLiA7XG5SZXF1ZXN0aW5nIEFDQ0VTUyBTSEFSRTtcbkxvY2sgUmVxdWVzdGVkIGF0IHRpbWUgdD0zXCJdXG5uNFtcIi4uLlwiXVxubjVbXCJTRUxFQ1QgLi4uIEZST00gLi4uIHVzZXJzIC4uLiA7XG5SZXF1ZXN0aW5nIEFDQ0VTUyBTSEFSRTtcbkxvY2sgUmVxdWVzdGVkIGF0IHRpbWUgdD0yMFwiXG5dXG5uMi0tV2FpdGluZyBvbi0tPm4wXG5uMi0tV2FpdGluZyBvbi0tPm4xXG5uMy0tV2FpdGluZyBvbi0tPm4yXG5uNC0tV2FpdGluZyBvbi0tPm4yXG5uNS0tV2FpdGluZyBvbi0tPm4yXG5zdHlsZSBuMCBmaWxsOiM5ZmE2NDcsY29sb3I6YmxhY2siLCJtZXJtYWlkIjpudWxsfQ" /></p>

<p>For a great article on this exact scenario happening, see <a href="https://xata.io/blog/migrations-and-exclusive-locks">here</a>.</p>

<h3 id="long-running-transactions-can-be-just-as-bad">Long-running transactions can be just as bad</h3>

<p>If you’re not familiar with <a href="https://www.postgresql.org/docs/current/tutorial-transactions.html">transactions</a>, they’re a way of grouping together a series of database statements so they act as all-or-nothing (in fancy lingo, they’re “atomic”).
Once you begin a transaction (with <code class="language-plaintext highlighter-rouge">BEGIN</code>, of course), you’re hiding away.
No other clients can see any changes you’re making.
You can finish the transaction (with <code class="language-plaintext highlighter-rouge">COMMIT</code>) which then “publishes” them to the rest of the database.
Transactions are, in an abstract way, similar to locks: they allow you avoid issues with other clients messing up what you’re trying to do.</p>

<p>A classic example of a task begging for transactions is transferring money from one bank account to another.
You would want to decrement the balance of one account and increment the balance of the other.
If the database goes down or the originating account balance goes negative midway, you want to cancel the whole operation.
Transactions can make that possible.</p>

<p>However, you can easily shoot yourself in the foot when writing transactions if you keep them running too long.
That’s because once a transaction acquires a lock, it holds onto it until the transaction commits.
For example, let’s say Client 1 opened up <code class="language-plaintext highlighter-rouge">psql</code> and wrote the following:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">BEGIN</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">backpacks</span> <span class="k">WHERE</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="k">UPDATE</span> <span class="n">backpacks</span> <span class="k">SET</span> <span class="n">content_count</span> <span class="o">=</span> <span class="mi">3</span> <span class="k">WHERE</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">backpacks</span><span class="p">;</span>
<span class="c1">-- ...</span>
</code></pre></div></div>

<p>Oops! Client 1 has stepped away from their desk:
Someone just brought home some cupcakes!
Even though Client 1 is effectively “done” updating the row with <code class="language-plaintext highlighter-rouge">id = 2</code>, they still have the lock.<sup id="fnref:row_locks" role="doc-noteref"><a href="#fn:row_locks" class="footnote" rel="footnote">5</a></sup>
If another client wanted to delete this row, they would run this:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">DELETE</span> <span class="k">FROM</span> <span class="n">backpacks</span> <span class="k">WHERE</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="c1">-- ...</span>
<span class="c1">-- ?</span>
</code></pre></div></div>
<p>But it would just hang.
It wouldn’t actually delete anything until Client 1 came back and committed the transaction.</p>

<p>You can imagine how this can lead to all kinds of scenarios where clients are holding onto locks for much longer than they need, preventing others from successfully making queries against or updates to the database.</p>

<h2 id="jsonb-is-a-sharp-knife">JSONB is a sharp knife</h2>

<p>Postgres has a remarkably powerful feature: you can store queryable and efficiently serialized JSON as a value in a row.<sup id="fnref:json_vs_jsonb" role="doc-noteref"><a href="#fn:json_vs_jsonb" class="footnote" rel="footnote">6</a></sup>
In many ways, it makes Postgres have all the strengths of a <a href="https://en.wikipedia.org/wiki/Document-oriented_database">document-oriented database</a> (like MongoDB, for example) without having to spin up a new service or coordinate between two different data stores.</p>

<p>However, it has its downsides if used improperly.</p>

<h3 id="jsonb-can-be-slower-than-normal-columns">JSONB can be slower than normal columns</h3>

<p>While JSONB is quite flexible, Postgres doesn’t keep track of JSONB columns’ statistics which can mean that an equivalent query against a single JSONB column can be significantly slower than against a set of “normal” columns.
<a href="https://www.heap.io/blog/when-to-avoid-jsonb-in-a-postgresql-schema">Here’s a great blog post with someone demonstrating it making things 2000x slower!</a></p>

<h3 id="jsonb-is-not-as-self-documenting-as-a-standard-table-schema">JSONB is not as self-documenting as a standard table schema</h3>

<p>A JSONB column can have basically anything in it–that’s one of the main reasons it’s so powerful!
But it also means you have few guarantees about how it’s structured.
With a normal table, you can look up the schema and see what a query will return.
Will a key be written in camelCase? snake_case?
Will states be described with boolean <code class="language-plaintext highlighter-rouge">true</code>/<code class="language-plaintext highlighter-rouge">false</code>? Or with enums like <code class="language-plaintext highlighter-rouge">yes</code>/<code class="language-plaintext highlighter-rouge">maybe</code>/<code class="language-plaintext highlighter-rouge">no</code>?
You have no idea with JSONB as it doesn’t have the same static typing that Postgres data normally has.</p>

<h3 id="jsonb-postgres-types-are-a-bit-awkward-to-work-with">JSONB Postgres types are a bit awkward to work with</h3>

<p>Let’s say you have a table called <code class="language-plaintext highlighter-rouge">backpacks</code> with a JSONB column <code class="language-plaintext highlighter-rouge">data</code> where you have a <code class="language-plaintext highlighter-rouge">brand</code> field.
You want to find the JanSport <code class="language-plaintext highlighter-rouge">backpacks</code> because you love the early 90s aesthetic.
So you write the query:<sup id="fnref:jsonb_subscripting" role="doc-noteref"><a href="#fn:jsonb_subscripting" class="footnote" rel="footnote">7</a></sup></p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- WARNING: Does not work!</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">backpacks</span> <span class="k">where</span> <span class="k">data</span><span class="p">[</span><span class="s1">'brand'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'JanSport'</span><span class="p">;</span>
</code></pre></div></div>
<p>and you get the error back</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ERROR:  invalid input syntax for type json
LINE 1: select * from backpacks where data['brand'] = 'JanSport';
                                                      ^
DETAIL:  Token "JanSport" is invalid.
CONTEXT:  JSON data, line 1: JanSport
</code></pre></div></div>

<p>What gives?
Postgres is expecting the right-hand side type of the comparison to match the left-hand side type; that is, for it to be a correctly formatted JSON document–therefore, it needs to be a JSON object, array, string, number, boolean, or null.
Keep in mind that none of these types have anything to do with Postgres types like <code class="language-plaintext highlighter-rouge">boolean</code> or <code class="language-plaintext highlighter-rouge">integer</code>. And <code class="language-plaintext highlighter-rouge">NULL</code> in SQL works very differently from JSONB’s <code class="language-plaintext highlighter-rouge">null</code>, which acts more just like a normal type.<sup id="fnref:jsonb_null" role="doc-noteref"><a href="#fn:jsonb_null" class="footnote" rel="footnote">8</a></sup>
To correctly write this query, you need to enable Postgres to be able to do some coercion.</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">backpacks</span> <span class="k">where</span> <span class="k">data</span><span class="p">[</span><span class="s1">'brand'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'"JanSport"'</span><span class="p">;</span>
<span class="c1">-- ^ This is really equivalent to the following (because Postgres knows the left-hand side is `jsonb`)</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">backpacks</span> <span class="k">where</span> <span class="k">data</span><span class="p">[</span><span class="s1">'brand'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'"JanSport"'</span><span class="p">::</span><span class="n">jsonb</span><span class="p">;</span>
<span class="c1">-- Alternatively, you could convert the left-hand side to Postgres `text`:</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">backpacks</span> <span class="k">where</span> <span class="k">data</span><span class="o">-&gt;&gt;</span><span class="s1">'brand'</span> <span class="o">=</span> <span class="s1">'JanSport'</span><span class="p">;</span>
</code></pre></div></div>

<p>Note the double quotes inside the single quotes.
<code class="language-plaintext highlighter-rouge">JanSport</code> on its own isn’t valid JSON.</p>

<p>What’s more is <a href="https://www.postgresql.org/docs/current/functions-json.html">there are a bunch more operators and functions</a> that are specific to JSONB and are hard to remember all at once.</p>

<h2 id="anyway">Anyway…</h2>

<p>Hope you found this useful.
Thank you to Lillie Chilen, <a href="https://github.com/monicacowan">Monica Cowan</a>, <a href="https://stevenharman.net">Steven Harman</a>, and <a href="https://kwugirl.github.io/">KWu</a> for encouragement and feedback on this post.
If you have any corrections, feedback, or comments, you can find me on basically all sites as <code class="language-plaintext highlighter-rouge">hibachrach</code>.</p>

<hr />

<p><br /></p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:a4_correction" role="doc-endnote">
      <p>If you print it on A4 paper, it’s 3,024 pages; just another reason that standard is better, I guess. <a href="#fnref:a4_correction" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:copy_permissions" role="doc-endnote">
      <p>This avoids having to use the more standard <code class="language-plaintext highlighter-rouge">COPY</code> statement which unfortunately often requires escalated privileges which you may or may not have access to. <a href="#fnref:copy_permissions" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:alter_table_special_cases" role="doc-endnote">

      <p>That is…<em>typically</em>. Some <code class="language-plaintext highlighter-rouge">ALTER TABLE</code> forms (like adding constraints) require a less restrictive lock.
See <a href="https://www.postgresql.org/docs/current/sql-altertable.html">its page in the docs</a> for more info. <a href="#fnref:alter_table_special_cases" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:alter_table_special_cases:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a></p>
    </li>
    <li id="fn:default_changes" role="doc-endnote">

      <p>It used to be that <em>any</em> default could make adding a column slow, but <a href="https://www.postgresql.org/docs/current/ddl-alter.html#DDL-ALTER-ADDING-A-COLUMN">this was fixed in Postgres 11</a>, which feels recent to me but of course was released 6 years ago. <a href="#fnref:default_changes" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:row_locks" role="doc-endnote">

      <p>In this case, the lock at issue is a <a href="https://www.postgresql.org/docs/current/explicit-locking.html#LOCKING-ROWS">row lock</a>, which (as you might guess) is a lock that is on the row.
Row locks work fairly similarly to the table-level locks we were discussing earlier, but are a bit simpler and only have 4 levels. <a href="#fnref:row_locks" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:json_vs_jsonb" role="doc-endnote">

      <p>Postgres has both JSON values (where the text is stored as text) and JSONB where the JSON is converted to an efficient binary format.
JSONB has a number of advantages (e.g. you can index it!) to the point where one can consider the JSON format to just be for special cases (in my experience, anyway). <a href="#fnref:json_vs_jsonb" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:jsonb_subscripting" role="doc-endnote">
      <p>This is leveraging <a href="https://www.crunchydata.com/blog/better-json-in-postgres-with-postgresql-14">the relatively new subscripting syntax introduced in Postgres 14</a> (in my opinion, better than the original <code class="language-plaintext highlighter-rouge">-&gt;</code> syntax which feels less familiar compared with how JSON is traversed elsewhere). <a href="#fnref:jsonb_subscripting" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:jsonb_null" role="doc-endnote">
      <p>Most notably, <code class="language-plaintext highlighter-rouge">'null'::jsonb = 'null'::jsonb</code> is <code class="language-plaintext highlighter-rouge">true</code> whereas <code class="language-plaintext highlighter-rouge">NULL = NULL</code> is <code class="language-plaintext highlighter-rouge">NULL</code> <a href="#fnref:jsonb_null" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[I’ve been working professionally for the better part of a decade on web apps and, in that time, I’ve had to learn how to use a lot of different systems and tools. During that education, I found that the official documentation typically proved to be the most helpful.]]></summary></entry><entry><title type="html">JavaScript Improvements</title><link href="https://challahscript.com/javascript_improvements" rel="alternate" type="text/html" title="JavaScript Improvements" /><published>2020-10-07T00:00:00-07:00</published><updated>2020-10-07T00:00:00-07:00</updated><id>https://challahscript.com/javascript_improvements</id><content type="html" xml:base="https://challahscript.com/javascript_improvements"><![CDATA[<p>In this article I go over three things that, in my mind, would make JavaScript
better. None are new ideas. This post is an expansion of a tweet I had when I saw
someone asking about improvements for JS. (though probably are impossible for
various reasons). I’m going to be primarily speaking about browsers and the web,
though much of this might apply to Node.js (though I’m not as familiar with that
area so I can’t speak on it confidently).</p>

<h1 id="versions-for-js">Versions for JS</h1>

<p>Just as a heads up: I’m not really talking about different ECMAScript versions
(e.g. ES6, ES2019, etc.) here–I’m talking about how most programming languages
refer to versions.</p>

<p>Right now, there are two versions of JS: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode">Strict mode</a> and <a href="https://developer.mozilla.org/en-US/docs/Glossary/Sloppy_mode">“sloppy
mode”</a>. Feature detection is done dynamically: if a
script makes use of any feature or change in the language that isn’t supported
by the environment running it, it will error, either silently or loudly
depending on what that feature is.</p>

<p>To get around this, developers do one or both of the following:</p>

<h2 id="strategy-1-transpilepolyfill-to-the-lowest-common-denominator">Strategy 1: Transpile/polyfill to the lowest common denominator</h2>

<p>To get around browsers not supporting features, we use tools like <a href="https://babeljs.io/">Babel</a>
to convert JS making use of newer features to JS supported by all or polyfill
them with. However, this
has a few problems:</p>

<ol>
  <li>Most of the time, the transpilation increases file size and parsing time.
<a href="https://babeljs.io/repl#?browsers=ie%2011e&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=GYewTgBAFAxiB2BnALhAhhEwICMCUEA3gFAC-QA&amp;debug=false&amp;forceAllTransforms=true&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=es2015&amp;prettier=false&amp;targets=&amp;version=7.11.6&amp;externalPlugins=">Here</a> is a dramatic instance of that (<a href="https://babeljs.io/docs/en/faq#why-is-the-output-of-forof-so-verbose-and-ugly">not that this is
Babel’s fault…</a>). This is despite the fact that most
browsers don’t need this extra code.</li>
  <li>Transpilation requires a target platform. For now, it seems like the defacto
standard is ES5, but this is already changing: websites that can afford to
drop older browsers like IE11 are doing so (e.g. GitHub). What is the <em>right</em>
target? This might get harder to answer once IE11 disappears and we truly
only need to support evergreen (i.e. silently auto-updating) browsers.
Different browsers might implement features in different orders. Automated
tools like <a href="https://github.com/browserslist/browserslist"><code class="language-plaintext highlighter-rouge">browserslist</code></a> reduce the impact of this point,
but they require upkeep. If a website stops development now but stays online,
its JS bundle won’t get any faster despite the herd of browsers moving to
support the newer features in the source JS.</li>
  <li>If one takes shortcuts (via options like “loose mode” for various Babel
transpilations) you could actually be introducing bugs by fragmenting the
underling semantics of a particular feature (though I admit this problem is
not super likely).</li>
  <li>Transpilation does not get around efforts to dramatically evolve the JS
language (especially those which remove old baggage). Syntax that is
fundamentally incompatible with old and seldom-used features simply can’t be
introduced because we <a href="https://www.w3.org/TR/html-design-principles/#support-existing-content">can’t break the web</a>.</li>
</ol>

<h2 id="strategy-2-offer-different-bundles-to-different-platforms-based-on-proxies">Strategy 2: Offer different bundles to different platforms based on proxies</h2>

<p>The idea is that you can identify what a browser might need based on the version
presented in its “user agent” (UA). There’s <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent">a whole article on MDN on why this is a
bad idea in general</a>. However, this hasn’t stopped
influential companies like Twitter from <a href="https://twitter.com/CharlieCroom/status/1291478104016289799">doing it</a>.</p>

<p>Google Developers instead <a href="https://web.dev/codelab-serve-modern-code/#using-es-modules-with-babel">encourages using the support for <code class="language-plaintext highlighter-rouge">&lt;script
type="module"&gt;</code> as a discriminating factor</a>. This seems a bit
better, but of course this is just one test–<a href="https://thingsthemselves.com/reminder-safari-is-not-an-evergreen-browser/">Safari is not an evergreen
browser</a> and so despite it supporting modules, we can’t
rely on this to check for support for “generally new feature” availability in
the medium or long-term.</p>

<h2 id="how-versioning-fits-in">How versioning fits in</h2>

<p>As I said at the beginning, there already is a versioning scheme for JS. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode">Strict
mode</a> changes the behavior of JS scripts in a backwards
incompatible way: if you had a script that worked in “sloppy mode”, it might
break in strict mode.</p>

<p>However, it doesn’t look like there are any plans to further extend this
approach. When <a href="https://developers.google.com/web/updates/2018/03/smooshgate">“#SmooshGate”</a> (an incident of browsers accidentally
breaking sites relying on old JS extensions by adding incompatible features)
happened, versioning was suggested by <a href="https://www.reddit.com/r/javascript/comments/8ln83r/at_todays_tc39_meeting_smooshgate_was_resolved_by/dzhvvhy?utm_source=share&amp;utm_medium=web2x&amp;context=3">more</a>
<a href="https://news.ycombinator.com/item?id=17141522">than</a> <a href="https://news.ycombinator.com/item?id=17141494">one</a>
<a href="https://dev.to/joelnet/a-pragmatic-solution-to-flatten-proposal-problem-smooshgate-javascript--jal">person</a>. After all, with versioned JS, the issue
evaporates. Commenters on Hacker News responded to these suggestions, suggesting
that supporting multiple distinct versions <a href="https://news.ycombinator.com/item?id=17141024">introduces significant complexity
for developers of JS engines</a>. One person even
<a href="https://news.ycombinator.com/item?id=17143251">noted</a></p>
<blockquote>
  <p>This has been discussed at length and they have decided not to do it. It’s not
a missing feature, it’s by design.</p>
</blockquote>

<p>There are other negatives to versioning expounded on in <a href="https://exploringjs.com/es6/ch_one-javascript.html#sec_versioning">this wonderful
article</a>, such as the following quoted here:</p>

<blockquote>
  <ul>
    <li>Engines become bloated, because they need to implement the semantics of all
versions. The same applies to tools analyzing the language (e.g. style
checkers such as JSLint).</li>
    <li>Programmers need to remember how the versions differ.</li>
    <li>Code becomes harder to refactor, because you need to take versions into
consideration when you move pieces of code.</li>
  </ul>
</blockquote>

<p>I can’t speak much to the work of maintaining engines–this is done by engineers
far more skilled than myself. My immediate reaction is that managing different
versions might enable stricter handling of various code, leading to
simplification, though that’s probably a naive perspective.</p>

<p>On the topic of remembering how versions differ, I would say this is simple in
comparison to the inconsistent mess of browser compatibility, JS transpilation
configuration, and generally frequent change within the ecosystem (though I will
be the first to say that the last point has been fairly exaggerated). In other
languages, versions change, and this is considered business as usual.</p>

<p>With regards to added difficulty in refactoring, I would say that this again is
probably simpler than other things which we do semi-regularly, such as upgrading
major versions of important libraries (e.g. jQuery, webpack), and is likely able
to be automated. Additionally, the difficulty is highly dependent on the
audacity of those at the reins of JavaScript, who, based on the current
environment, seem unlikely to cause unnecessary upset.</p>

<h1 id="everything-is-an-expression">Everything is an expression</h1>

<p>The main area where I wish this were the standard within JS is with <code class="language-plaintext highlighter-rouge">if</code>/<code class="language-plaintext highlighter-rouge">else</code>,
<code class="language-plaintext highlighter-rouge">try</code>/<code class="language-plaintext highlighter-rouge">catch</code>, and <code class="language-plaintext highlighter-rouge">switch</code>/<code class="language-plaintext highlighter-rouge">case</code> statements. This is something that I use very
frequently within Ruby</p>

<h2 id="example-ifelse">Example: <code class="language-plaintext highlighter-rouge">if</code>/<code class="language-plaintext highlighter-rouge">else</code></h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">cond</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">b</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">c</span>
  <span class="p">};</span>
</code></pre></div></div>

<h2 id="example-trycatch">Example: <code class="language-plaintext highlighter-rouge">try</code>/<code class="language-plaintext highlighter-rouge">catch</code></h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">somethingThatMightFail</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">fallbackValue</span>
  <span class="p">};</span>
</code></pre></div></div>

<h2 id="example-switchcase">Example: <code class="language-plaintext highlighter-rouge">switch</code>/<code class="language-plaintext highlighter-rouge">case</code></h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span>
  <span class="k">switch</span> <span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">apple</span><span class="dl">'</span> <span class="p">{</span>
      <span class="dl">'</span><span class="s1">fruit</span><span class="dl">'</span>
    <span class="p">}</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">broccoli</span><span class="dl">'</span> <span class="p">{</span>
      <span class="dl">'</span><span class="s1">vegetable</span><span class="dl">'</span>
    <span class="p">}</span>
    <span class="k">default</span> <span class="p">{</span>
      <span class="dl">'</span><span class="s1">unknown</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">};</span>
</code></pre></div></div>

<p>Its possible this would need to use different keywords to replace <code class="language-plaintext highlighter-rouge">case</code> and
<code class="language-plaintext highlighter-rouge">default</code> for the sake of JS interpreters and maximizing backwards
compatibility because <code class="language-plaintext highlighter-rouge">case</code>s function as labels.</p>

<h2 id="current-proposals">Current proposals</h2>

<p>To achieve this, <code class="language-plaintext highlighter-rouge">do</code> expressions were <a href="https://github.com/tc39/proposal-do-expressions">proposed 2 years
ago</a>, which satisfy the requirements with slightly
more verbose syntax. E.g. for the <code class="language-plaintext highlighter-rouge">if</code>/<code class="language-plaintext highlighter-rouge">else</code>, you’d write</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">do</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">cond</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">b</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">c</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>However, the proposal is still at stage 1 of <a href="https://tc39.es/process-document/">the 4-stage TC39 (effective JS
steering committee) process</a>, though <a href="https://github.com/tc39/proposal-do-expressions/issues/49">it’s still being
discussed</a>. Some have asked “why do we need the <code class="language-plaintext highlighter-rouge">do</code>?”
and make the first syntax (without the explicit <code class="language-plaintext highlighter-rouge">do</code>) part of the language,
though <a href="https://github.com/tc39/proposal-do-expressions/issues/39#issuecomment-468645498">this can’t be done without interfering with existing uncommon language
features</a> (another example of not being able to change syntax due
to “version constraint”)</p>

<h1 id="improved-caching">Improved caching</h1>

<p>I would explain this, but there are actually people <a href="https://www.pika.dev/">already solving this
problem</a>, and they’ve put together <a href="https://www.pika.dev/about">this article explaining how
caching can be improved around the web</a>.</p>

<p>However, there are still unresolved issues here: how does this work for
different browser targets? It’s fine if all libraries are only using
browser-supported features, but we all know that that won’t be consistent for
all features across all browsers into the future. A lot of this builds on the
issues presented in the section on versioning above: if there are no ways to
talk consistently about versioning, then it’s much harder to solve these
problems in an automated way.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[In this article I go over three things that, in my mind, would make JavaScript better. None are new ideas. This post is an expansion of a tweet I had when I saw someone asking about improvements for JS. (though probably are impossible for various reasons). I’m going to be primarily speaking about browsers and the web, though much of this might apply to Node.js (though I’m not as familiar with that area so I can’t speak on it confidently).]]></summary></entry><entry><title type="html">A Hierarchy of Documentation</title><link href="https://challahscript.com/hiearchy_of_documentation" rel="alternate" type="text/html" title="A Hierarchy of Documentation" /><published>2020-04-24T00:00:00-07:00</published><updated>2020-04-24T00:00:00-07:00</updated><id>https://challahscript.com/hiearchy_of_documentation</id><content type="html" xml:base="https://challahscript.com/hiearchy_of_documentation"><![CDATA[<p>“Where should this information live?” is a common question I encounter daily as
a software engineer. I (alone or in consultation with others) will make a
decision and that information needs to persist…somewhere. The goal of course
is to prevent some future engineer (often myself) from encountering some code
and asking “why?” or, even worse, “what?”.</p>

<p>I’ve found there’s a sort of hierarchy to the accessibility
of various information that I found useful in sharing.</p>

<p>In order of most accessible to least, the hierarchy is as follows:</p>

<ol>
  <li>Code (identifiers)</li>
  <li>In-code comments</li>
  <li>Commit messages</li>
  <li>Pull/merge requests &amp; issue trackers</li>
</ol>

<p>This list may be different for other people and may change in time as tools
get better, but for now, this has held true for me.</p>

<p>I’m sure that similar things have also been said before. Shoulders of giants and
all that—would love to read any previous writings on similar topics!</p>

<p>So! Let’s get into some of the reasoning…</p>

<h2 id="code-identifiers">Code (Identifiers)</h2>

<h3 id="accessibility">Accessibility</h3>

<p>By far, the most important place to put information is in the code itself. Why?</p>

<ul>
  <li>It can be easily searched with tools like <code class="language-plaintext highlighter-rouge">grep</code>, <code class="language-plaintext highlighter-rouge">ag</code>, <code class="language-plaintext highlighter-rouge">ripgrep</code>, or your
favorite file searcher</li>
  <li>It (generally) follows a predictable structure and connections between
components can be traced (e.g. through the call stack)</li>
  <li>It is <em>very</em> unlikely to be discarded accidentally</li>
</ul>

<h3 id="responsibilities">Responsibilities</h3>

<p>Because of their inherent visibility, identifiers<sup id="fnref:identifiers_meaning" role="doc-noteref"><a href="#fn:identifiers_meaning" class="footnote" rel="footnote">1</a></sup> should
always be the first place to put information, especially</p>

<ul>
  <li>What values represent</li>
  <li>What functions do &amp; how they do it</li>
  <li>(Sparingly) when functions are invoked<sup id="fnref:identifiers_when" role="doc-noteref"><a href="#fn:identifiers_when" class="footnote" rel="footnote">2</a></sup></li>
</ul>

<h3 id="identifiers-and-code-simplification">Identifiers and Code Simplification</h3>

<p>I’m going to intentionally give you no context for the following code:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span>
  <span class="nx">userSession</span><span class="p">[</span><span class="dl">'</span><span class="s1">signed</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">update</span><span class="dl">'</span><span class="p">]</span> <span class="o">||</span>
  <span class="nx">AdminOverrides</span><span class="p">[</span><span class="nx">userSession</span><span class="p">[</span><span class="dl">'</span><span class="s1">signed</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">]]</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="nx">repository</span><span class="p">.</span><span class="k">delete</span><span class="p">();</span>
  <span class="k">return</span> <span class="nx">render</span><span class="p">({</span>
    <span class="na">status</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
    <span class="na">body</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">notice</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Repository successfully deleted.</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">render</span><span class="p">({</span>
    <span class="na">status</span><span class="p">:</span> <span class="mi">403</span><span class="p">,</span>
    <span class="na">body</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">errors</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">You are not allowed to perform that action.</span><span class="dl">'</span><span class="p">]</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Okay, pretty straightforward. But consider this version instead:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">userHasUpdateAccess</span> <span class="o">=</span> <span class="p">(</span>
  <span class="nx">userSession</span><span class="p">[</span><span class="dl">'</span><span class="s1">signed</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">update</span><span class="dl">'</span><span class="p">]</span> <span class="o">||</span>
  <span class="nx">AdminOverrides</span><span class="p">.</span><span class="nx">update</span><span class="p">[</span><span class="nx">userSession</span><span class="p">[</span><span class="dl">'</span><span class="s1">signed</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">]]</span>
<span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">userHasAdminUpdateAccess</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">repository</span><span class="p">.</span><span class="k">delete</span><span class="p">();</span>
  <span class="k">return</span> <span class="nx">render</span><span class="p">({</span>
    <span class="na">status</span><span class="p">:</span> <span class="nx">STATUS_CODES</span><span class="p">.</span><span class="nx">ok</span><span class="p">,</span>
    <span class="na">body</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">notice</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Repository successfully deleted.</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">render</span><span class="p">({</span>
    <span class="na">status</span><span class="p">:</span> <span class="nx">STATUS_CODES</span><span class="p">.</span><span class="nx">unauthorized</span><span class="p">,</span>
    <span class="na">body</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">errors</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">You are not allowed to perform that action.</span><span class="dl">'</span><span class="p">]</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We’ve made a few updates. First, we’ve pulled the condition out into its own
variable. What that’s done is document the intention of what the condition is
<em>supposed</em> to mean. This has a few benefits:</p>

<ul>
  <li><strong>Each line is doing less, cognitively.</strong> That means you have to think about
less when reading. You’re going to read code way more than you’re going to
write it—why make it harder for yourself?<sup id="fnref:code_boring_good" role="doc-noteref"><a href="#fn:code_boring_good" class="footnote" rel="footnote">3</a></sup></li>
  <li><strong>Pulling that connection out and labeling it makes it harder to miss when
changes happen.</strong> At some point, how we determine whether a user has
update access will probably change. Additionally, the body of the first branch
of the <code class="language-plaintext highlighter-rouge">if</code> may get much larger. It’s always easier to keep things tidy one
piece at a time (as opposed to going back and cleaning it up later)!</li>
</ul>

<p>The other two changes are to replace the HTTP status codes (which are
essentially <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)">magic numbers</a>) with references to a global
<code class="language-plaintext highlighter-rouge">STATUS_CODES</code> object. While HTTP status codes are fairly well known (e.g. a
“404” is meaningful to many that have never done web development), they’re
likely not going to be better known than English.</p>

<p>Generally, breaking things down like this makes the answer to “why?” very
obvious.</p>

<h3 id="caveat-enigmatic-language-syntax">Caveat: Enigmatic language syntax</h3>

<p>Unlike libraries which can often be worked around, specific hard-to-parse
features of a language’s syntax may be unavoidable. For example, most languages
have regular expressions which are infamous for how easy they are to mess up.
Consider the following regular expression in JavaScript:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">IS_VALID_EMAIL_REGEX</span> <span class="o">=</span> <span class="sr">/^</span><span class="se">[^</span><span class="sr">@</span><span class="se">]</span><span class="sr">+@</span><span class="se">[^</span><span class="sr">@</span><span class="se">]</span><span class="sr">+$/</span><span class="p">;</span>
</code></pre></div></div>

<p>There’s not really much more we can do in terms of adding/changing identifiers
to clarify how the regular expression determines which email addresses are valid
and which aren’t–you just have to know the specific syntax of (JavaScript)
regular expressions. In cases like these, an in-code comment (which we’ll talk
about more in the next section) is the next best place to put this information:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Matches one or more non-`@` characters, folloed by a `@` character, followed</span>
<span class="c1">// by one or more non-`@` characters.</span>
<span class="kd">const</span> <span class="nx">IS_VALID_EMAIL_REGEX</span> <span class="o">=</span> <span class="sr">/^</span><span class="se">[^</span><span class="sr">@</span><span class="se">]</span><span class="sr">+@</span><span class="se">[^</span><span class="sr">@</span><span class="se">]</span><span class="sr">+$/</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="in-code-comments">In-code comments</h2>

<h3 id="accessibility-1">Accessibility</h3>

<p>One of the points made about code also apply to in-code comments: they are
easily searchable using a file searcher. Also, they do not need any further
seeking out than code,<sup id="fnref:dimmed_comments" role="doc-noteref"><a href="#fn:dimmed_comments" class="footnote" rel="footnote">4</a></sup> unlike something like commit messages.</p>

<p>However, as they are in a non-programming language, they can be a bit less
predictable in terms of structure—you’ll have a harder of a time breaking an
English sentence into an abstract syntax tree than compared with something like
JavaScript!</p>

<p>Additionally, in-code comments are related to their subjects
typically by proximity alone. If someone moves that code without taking the
comment with it, the comment ceases to be helpful (or, worse, becomes
confusing/misleading). We talk about this more in the <a href="#common-pitfall-poor-comment-location">“Pitfall”
section</a> below.</p>

<h3 id="responsibilities-1">Responsibilities</h3>

<p>Comments, while still being very visible, afford a much greater level of
flexibility in comparison with code identifiers for documenting behavior,
decisions, etc. Comments are where you put</p>

<ul>
  <li>Explanations of why a section of code is the way that it is</li>
  <li>Explanations of why a section of code <em>isn’t</em> written another way <strong>if one may
be tempted to rewrite it</strong></li>
  <li>Contextual information for where a code snippet came from if possibly helpful
to future readers<sup id="fnref:snippet_came_from" role="doc-noteref"><a href="#fn:snippet_came_from" class="footnote" rel="footnote">5</a></sup></li>
  <li>Explanations of <a href="#caveat-enigmatic-language-syntax">enigmatic language syntax</a></li>
  <li>(Sparingly) warnings and assumptions<sup id="fnref:warnings_and_assumptions" role="doc-noteref"><a href="#fn:warnings_and_assumptions" class="footnote" rel="footnote">6</a></sup></li>
</ul>

<h3 id="common-pitfall-poor-comment-location">Common Pitfall: Poor Comment Location</h3>

<p>For example, say we have this method:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Must be done in reverse order to be done in O(N) time due to</span>
<span class="c1">// Kleppner's Law of Stupid Data Structures</span>
<span class="kd">function</span> <span class="nx">smooshify</span><span class="p">(</span><span class="nx">newElements</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">newElements</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">flarbo</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">newElements</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>At some later point, it turns out are some <code class="language-plaintext highlighter-rouge">null</code> elements that need to be
screened out:<sup id="fnref:null_screening" role="doc-noteref"><a href="#fn:null_screening" class="footnote" rel="footnote">7</a></sup></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Must be done in reverse order to be done in O(N) time due to</span>
<span class="c1">// Kleppner's Law of Stupid Data Structures</span>
<span class="kd">function</span> <span class="nx">smooshify</span><span class="p">(</span><span class="nx">newElements</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">nonNullNewElements</span> <span class="o">=</span> <span class="nx">newElements</span><span class="p">.</span><span class="nx">withoutNulls</span><span class="p">();</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">newElements</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">flarbo</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">nonNullNewElements</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>With the code as it is now, another dev may stumble along one day and ask “Is
<code class="language-plaintext highlighter-rouge">withoutNulls</code> iterating in reverse order?” While this may be a bit of a trivial
example, these things can lead to a lot more headache down the line</p>

<p>The only way to truly avoid mistakes like this is by is by keeping a vigilant
eye on comments. Some techniques I’ve found to be helpful:</p>

<ul>
  <li>
    <p>Keep comments as closely positioned to the code they’re describing as
possible. E.g. if talking about code in the first branch of an <code class="language-plaintext highlighter-rouge">if</code> statement,
put that comment <strong>in the first branch</strong>, not above the entire statement:</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// comment about why `floarp` should be used --- BAD</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">somethingOrOther</span><span class="p">())</span> <span class="p">{</span>
  <span class="c1">// comment about why `floarp` should be used --- GOOD</span>
  <span class="nx">floarp</span><span class="p">();</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">blarg</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Make references to specific identifiers in comments as these tend to garner
more attention and help establish a more explicit relationship between the
comment and the code</p>
  </li>
</ul>

<h2 id="commit-messages">Commit Messages</h2>

<p>Most code that I’ve interacted with is version-controlled with something like
Git, and if not Git, some other version-control software like Mercurial. I’m
going to be referring to Git exclusively in this section, but I’m sure that
there are similar tools for other version-control software.</p>

<h3 id="accessibility-2">Accessibility</h3>

<p>Unlike code or in-code comments, commit messages are not immediately visible
when browsing a codebase. However, they can be made much more easily accessible
with tools like <a href="https://github.com/tpope/vim-fugitive">Fugitive</a> (for Vim) or
<a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">GitLens</a>
(for VSCode). However, they can be searched–just run <code class="language-plaintext highlighter-rouge">git log</code> and press
<kbd>/</kbd> and <em>BAM</em>! You can search through all your commit history (thanks
to <a href="https://en.wikipedia.org/wiki/Less_(Unix)"><code class="language-plaintext highlighter-rouge">less</code></a>)</p>

<p>Unfortunately, commit messages can sometimes be squashed or lost during a
rebase, so the information placed there may not be preserved forever, though
this mostly depends upon the other collaborators working on the repository.</p>

<h3 id="responsibilities-2">Responsibilities</h3>

<p>Much has been written about <a href="https://chris.beams.io/posts/git-commit/">how to write good commit
messages</a>, so I won’t be too
comprehensive here. However, I’d say the things I’m talking about here are, in
my opinion, the most important things about writing a useful commit message.  As
much as I like consistency, the grammatical aspects of commit message guidelines
are not nearly as helpful as guidelines on the <em>content</em> of the message (as long
as it’s readable!).</p>

<p>Commit messages are all about change. A commit itself is an object representing
a change to a codebase and commit messages ought to do the following:</p>

<ul>
  <li>Briefly summarize what changed, from a high level</li>
  <li>Explain why the changes in the commit are necessary</li>
  <li>Explain why other possible strategies were <em>not</em> attempted, if relevant</li>
</ul>

<p>These are much easier to accomplish when the commits you make are small and
focused (within reason).<sup id="fnref:atomic_commits" role="doc-noteref"><a href="#fn:atomic_commits" class="footnote" rel="footnote">8</a></sup></p>

<h3 id="tip-using-references-to-other-commits">Tip: using references to other commits</h3>

<p>While commit messages allow you to tell a story, any single commit rarely allows
you to tell the whole story. If referencing earlier changes, I highly encourage
you to make such references by using the commit hash. This will enable those
reading those commit messages later to gain the same context you had when
writing the message in the first place with a simple <code class="language-plaintext highlighter-rouge">git show</code>. A word of
warning however: commit hashes will change when you rebase or amend a commit, so
if referencing an earlier commit in a commit message, make sure to update that
hash if the earlier commit is ever altered.</p>

<h2 id="pullmerge-requests--issue-trackers">Pull/merge requests &amp; issue trackers</h2>

<p>These are your GitHubs, your Asanas, your Jiras. I’m lumping issue trackers and
hosted version control together because some of these services function as both
(e.g.  GitHub).</p>

<h3 id="accessibility-3">Accessibility</h3>

<p>While there’s a large amount of variance here, I always have found messages and
comments to get lost somehow, even when generally good search functionality is
present.  Some services are better than others at this, but even in GitHub
(which automatically doubly-link issues to pull requests), comments will be
collapsed or hidden in large pull requests, making them a pain to excavate.</p>

<h3 id="responsibilities-3">Responsibilities</h3>

<p>These services are all about facilitating conversation and communication. As
such, their responsibilities are focused on those topics:<sup id="fnref:use_of_trackers" role="doc-noteref"><a href="#fn:use_of_trackers" class="footnote" rel="footnote">9</a></sup></p>

<ul>
  <li>Documenting why certain changes weren’t done and/or aren’t worth doing
    <ul>
      <li>However, these should instead be put in the relevant commit messages if they
are related to certain changes that <em>did</em> make it into the codebase</li>
    </ul>
  </li>
  <li>Containing or summarizing deliberation about proposed changes, even when that
deliberation happens in real life or on something like Slack</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Hope you found this helpful in answering the question “where do I put this
information?”. If you have any thoughts, <a href="https://twitter.com/hibachrach">I’m on Twitter</a>.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:identifiers_meaning" role="doc-endnote">

      <p>Identifiers include variable names, function names,
class names/types, operators—basically anything that has a name that you can
control! <a href="#fnref:identifiers_meaning" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:identifiers_when" role="doc-endnote">

      <p>I’ll probably make another post about this, but I’ve found
answering the question of “when” to be a bit of a slippery slope, especially
in function names. When you answer the question of “when”, you are often doing
so at the expense of “what”. Who hasn’t written a function like <code class="language-plaintext highlighter-rouge">onClick</code> or
<code class="language-plaintext highlighter-rouge">after_save</code> that spans 20+ lines, accomplishing many disparate tasks? One
technique I’ve employed when these are unavoidable (as these identifiers are
often dictated by some external API) is to push all sense of “how” out of the
bodies of these functions—they merely list off the things to do and the “how”
is pushed into other functions. If you read on, we’re trying to lighten
cognitive load here! <a href="#fnref:identifiers_when" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:code_boring_good" role="doc-endnote">
      <p><a href="https://www.google.com/search?q=code+boring+good">This is not a new idea</a>. <a href="#fnref:code_boring_good" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:dimmed_comments" role="doc-endnote">
      <p>However, they may be slightly dimmed depending on the code editor. <a href="#fnref:dimmed_comments" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:snippet_came_from" role="doc-endnote">
      <p>I most often use this for adaptations of code from StackOverflow or blog posts. <a href="#fnref:snippet_came_from" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:warnings_and_assumptions" role="doc-endnote">

      <p>If possible, these should be replaced with good identifier naming, type
checking, validations, etc. <a href="#fnref:warnings_and_assumptions" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:null_screening" role="doc-endnote">

      <p>If this were real code, I would hope that someone would also
leave a comment explaining why we are doing this screening! <a href="#fnref:null_screening" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:atomic_commits" role="doc-endnote">

      <p>I found <a href="https://www.freshconsulting.com/atomic-commits/">this article</a> a great summary of the how/why
of keeping commits small <a href="#fnref:atomic_commits" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:use_of_trackers" role="doc-endnote">

      <p>Of course, these services have usages beyond the topics
addressed in this post like:</p>
      <ul>
        <li>centralizing the agreed upon priority of upcoming work</li>
        <li>establishing the owner(s) of specific tasks</li>
        <li>informing those outside the dev team about the progress of tasks, etc.</li>
      </ul>
      <p><a href="#fnref:use_of_trackers" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[“Where should this information live?” is a common question I encounter daily as a software engineer. I (alone or in consultation with others) will make a decision and that information needs to persist…somewhere. The goal of course is to prevent some future engineer (often myself) from encountering some code and asking “why?” or, even worse, “what?”.]]></summary></entry><entry><title type="html">A Brief Tour of Tools</title><link href="https://challahscript.com/tools" rel="alternate" type="text/html" title="A Brief Tour of Tools" /><published>2018-04-01T00:00:00-07:00</published><updated>2018-04-01T00:00:00-07:00</updated><id>https://challahscript.com/tools</id><content type="html" xml:base="https://challahscript.com/tools"><![CDATA[<h2 id="core-philosophy">Core philosophy</h2>

<h3 id="make-your-tools-as-ergonomic-as-possible">Make your tools as ergonomic as possible</h3>

<p>Ergonomics often comes up when talking with HR during onboarding: it’s the
reason why you should use comfortable, supportive chairs, keyboards, mice, and
such. “Battle scars” from work shouldn’t be encouraged. If your eyes, wrists, or
butt cheeks are hurting, try to address that problem. You’re doing labor. Labor
that most likely isn’t as tolling, as say, construction, but labor nonetheless.
Take care of your body. If you try to fight it, it’s likely to win. Even if
you’re not feeling active pain now, you might start experiencing symptoms after
years of damage. “It works for me” shouldn’t be the end of it. Get an ergonomic
chair, keyboard, and mouse to reduce strain. Here<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup><sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> are some good
guidelines on reducing eyestrain (I can personally vouch for tools like
<a href="https://justgetflux.com/">f.lux</a>!).</p>

<p>What does this mean for software? If you don’t like the way you’re interacting
with your tools (physical <em>or</em> virtual), you’re not going to have as much fun
using them.</p>

<p>Sometimes that can be a <em>good</em> thing: if a tool
<em>shouldn’t</em> be used, then you can design your system with that idea in mind. As
we are all designers in some way, this should be a familiar idea—e.g. if you
add a feature that forces a user to do 10 clicks instead of one, they’re less
likely to use that feature (c.f. trying to close your Amazon account).</p>

<p>Notice that I’m not talking about speed. The amount of time that you save with
one configuration or another probably isn’t going to save you the amount of time
that you put into setting it up (unless something was <em>really</em> wrong
before-hand). But reducing UX friction can often make you more productive,
reduce extraneous repetitive motion, and eliminate unnecessary mental work to
get from point A to point B. Some things that help towards this end include:</p>

<ul>
  <li>Reducing mouse usage<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">3</a></sup></li>
  <li>Reducing chorded shortcuts (e.g. minimizing stuff like <kbd>shift</kbd>+<kbd>&#8984;</kbd>+<kbd>option</kbd>+<kbd>t</kbd>)</li>
  <li>Reducing the steps to switch between tools and contexts</li>
</ul>

<h3 id="make-your-tools-accessible-to-an-outsider-without-a-large-amount-of-reconfiguration">Make your tools accessible to an outsider without a large amount of reconfiguration</h3>

<p>Everything that you do to configure your machine is most likely increasing the
barrier to entry somehow. That’s okay. It’s your machine—it should be most
comfortable for <em>you</em>. However, that doesn’t mean there won’t be a time where
someone else might have to use your keyboard or read your monitor. It should be
easy enough for that visitor to understand what’s going on or do some simple
tasks without you restarting your damn machine. Note that that doesn’t mean
disabling all of your config when someone walks over<sup id="fnref:wizardry" role="doc-noteref"><a href="#fn:wizardry" class="footnote" rel="footnote">4</a></sup>.</p>

<h3 id="dont-overdo-it">Don’t overdo it</h3>

<p>Your tools or configuration won’t make you a significantly better developer. It
might even make you a more annoying developer if you won’t stop talking about
such topics. And it always takes time to customize these things—the increased
efficiency won’t make up for that. Again, it’s about getting you to enjoy using
the tools while reducing strain, whether that strain is physical or mental.</p>

<h2 id="tmux">tmux</h2>

<p>I use tmux inside of iTerm2<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">5</a></sup>. Tmux is a “terminal multiplexer” which is an
incredibly geeky way of saying it allows you to have windows/splits inside of a
OS level window. Here are my main motivations for using it.</p>

<h3 id="attach-and-detach">Attach and detach</h3>

<p>When you start up tmux you’re starting up a server, on which you create and
attach “sessions” (basically just workspaces) where you can create windows
(really closer to tabs) which can have splits. These sessions can be attached
to and detached from at will. And that action is a completely distinct one from
opening or closing iTerm2, meaning if iTerm2 has to close for one reason or
another, my windows and splits set up exactly as when I left them.</p>

<p>This is great on a local machine but invaluable on remote sessions: when I was
doing research on machines that could only be SSH’d into, a random drop in the
Internet connection just meant I had to reattach to the session that was running
on the remote server. Note that the server will still die if your computer has
to restart.</p>

<p>I also find that this navigation is much easier than fiddling with actual
windows in a GUI. Which tend to be pretty poorly organized for search and
retrieval. Even in macOS, if I have a window that is minimized, I have to either
use my mouse to inspect my collection of hidden windows or cycle through them
using <kbd>control</kbd>+<kbd>f4</kbd><sup id="fnref:cycle" role="doc-noteref"><a href="#fn:cycle" class="footnote" rel="footnote">6</a></sup>.</p>

<h3 id="prefixes-over-chords">Prefixes over chords</h3>

<p>This is going to be a bit of a recurring theme, but tmux allows you to go from
split to split, window to window, or session to session without pressing many
keys <em>simultaneously</em>. Instead, you can define a common prefix (I have
<kbd>control</kbd>+<kbd>space</kbd>) and then press the tmux-specific shortcut
of your choosing.</p>

<h3 id="how-to-get-started">How to get started</h3>

<p>If you’re on a Mac, you can use Homebrew:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install tmux
</code></pre></div></div>

<p><a href="https://hackernoon.com/a-gentle-introduction-to-tmux-8d784c404340">Here’s</a> a tutorial to get you started.</p>

<h2 id="vimneovim">Vim/Neovim</h2>

<p>I could talk probably all day about Vim and why I love it. I’ll try to summarize
here to save your time and/or sanity. I <em>will</em> note that Vim has a fairly steep
learning curve but I find is worth it in the end. See <a href="http://www.terminally-incoherent.com/blog/2012/09/05/vim-is-a-usability-nightmare/">here</a> for
a great blogpost about Vim and usability.</p>

<h3 id="ubiquity">Ubiquity</h3>

<p>Vi or Vim is on basically every *nix machine that you might come across. If you
know how to use it in one place, you can use it anywhere.</p>

<h3 id="keyboard-first-design">Keyboard-first design</h3>

<p>Every interaction with Vim is intended to be done with the keyboard. There are
some things that <em>can</em> be done with the mouse (like scrolling or cursor
movement), but it’s primarily designed to be manipulated via the keyboard. That
makes it generally quite fast, eliminating the time to move your hand to the
mouse and back.</p>

<h3 id="composability">Composability</h3>

<p>This is probably the biggest and most Vim-specific point here. When you
manipulate text in Vim, you do so in a sort of “language”, complete with verbs,
nouns, adjectives, adverbs, etc.</p>

<p>Let’s say I’m editing a Ruby script and I’ve got this double negative here. We
want to make this a bit more readable, replacing the <code class="language-plaintext highlighter-rouge">unless</code> with an <code class="language-plaintext highlighter-rouge">if</code> and
the <code class="language-plaintext highlighter-rouge">empty?</code> with a <code class="language-plaintext highlighter-rouge">present?</code>.</p>

<script src="https://asciinema.org/a/HRBzkylrV8Bih8llxcEY8nJWV.js" id="asciicast-HRBzkylrV8Bih8llxcEY8nJWV" async=""></script>

<p>Here are all the key presses I needed to do to perform the above:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ciwifjjwwwct?presentjj:wq
</code></pre></div></div>

<p>Let’s break that down:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ciw</code>: This is basically a “sentence”. I’m pressing these keys them in what is
called “normal mode”. <code class="language-plaintext highlighter-rouge">c</code> means “change”, <code class="language-plaintext highlighter-rouge">i</code> means “inner”, and <code class="language-plaintext highlighter-rouge">w</code> means
“word”. “Change” means delete and then go into “insert mode”, the mode where
when I type, those characters appear on screen. I applied that “verb” to what
is called a “text object”. Here that “text object” is made up of the adjective
“inner” with the noun “word”.</li>
  <li><code class="language-plaintext highlighter-rouge">if</code>: This is just me typing the word “if”.</li>
  <li><code class="language-plaintext highlighter-rouge">jj</code>: This is a command I have set up for “insert mode” that gets me back to
“normal mode”. This is <kbd>escape</kbd> by default but I find this much
easier.</li>
  <li><code class="language-plaintext highlighter-rouge">www</code>: Here I’m pressing that “noun” <code class="language-plaintext highlighter-rouge">w</code> three times. Since there’s no “verb”
here, that just moves my cursor 1 “word” each time. I could have also typed
<code class="language-plaintext highlighter-rouge">3w</code> and achieved the same thing.</li>
  <li><code class="language-plaintext highlighter-rouge">ct?</code>: Here I’m using the same <code class="language-plaintext highlighter-rouge">c</code> verb but this time with the “noun” <code class="language-plaintext highlighter-rouge">t?</code>
which means “to <code class="language-plaintext highlighter-rouge">?</code>”, i.e. all the characters from my current position up to
(but not including) the next incidence of the character <code class="language-plaintext highlighter-rouge">?</code> on the current
line.</li>
  <li><code class="language-plaintext highlighter-rouge">present</code>: This is just me typing the word “present”.</li>
  <li><code class="language-plaintext highlighter-rouge">jj</code>: Same as before.</li>
  <li><code class="language-plaintext highlighter-rouge">:wq</code>: Here I’m performing what is known as a “command”. <code class="language-plaintext highlighter-rouge">:</code> gets me into
“command mode” (moving my cursor temporarily to the bottom of the Vim window)
where I then type <code class="language-plaintext highlighter-rouge">w</code> for “write” (meaning “save”) and <code class="language-plaintext highlighter-rouge">q</code> for “quit”.</li>
</ul>

<p>This is a simple example, but as you can see, you can mix and match all these
building blocks to manipulate your files in quite complex ways. Many Vim users
also create plugins that add core “parts of speech” to the editor. E.g.
<a href="https://github.com/tpope/vim-surround">vim-surround</a> enables the sequence <code class="language-plaintext highlighter-rouge">cs"'</code> which allows you to
“change the surrounding characters” (<code class="language-plaintext highlighter-rouge">cs</code>) from <code class="language-plaintext highlighter-rouge">"</code> to <code class="language-plaintext highlighter-rouge">'</code> as well as the
sequence <code class="language-plaintext highlighter-rouge">ysiw]</code> “add surrounding characters” (<code class="language-plaintext highlighter-rouge">ys</code>) to the “inner word” (<code class="language-plaintext highlighter-rouge">iw</code>),
specifically brackets (<code class="language-plaintext highlighter-rouge">]</code>).</p>

<h3 id="integration-with-the-terminal">Integration with the terminal</h3>

<p>(Partly thanks to tmux) I can run Vim in the same program that has my
<code class="language-plaintext highlighter-rouge">foreman</code> procs, my git interface, my logs, and pretty much everything else.
Switching between all of those things is super easy thanks to a plugin I use
called <a href="https://github.com/christoomey/vim-tmux-navigator">vim-tmux-navigator</a>. Basically I can use</p>

<ul>
  <li><kbd>control</kbd>+<kbd>h</kbd> (left)</li>
  <li><kbd>control</kbd>+<kbd>j</kbd> (down)</li>
  <li><kbd>control</kbd>+<kbd>k</kbd> (up)</li>
  <li><kbd>control</kbd>+<kbd>l</kbd> (right)</li>
</ul>

<p>to navigate between tmux and Vim panes indiscriminately.</p>

<p>When I need to run a test, I have a plugin called <a href="https://github.com/janko-m/vim-test">vim-test</a> that
allows me to run a test in a neighboring tmux pane and then interact with that
terminal session afterwards.</p>

<p>There are many other niceties here as well (e.g. sending the contents of a SQL
query edited in a Vim session to an interactive <code class="language-plaintext highlighter-rouge">psql</code> session) that I may go
into in a later post.</p>

<h3 id="so-much-more">So much more</h3>

<p>Again, I can talk about Vim all day (and probably will). There are many things
not covered here that I will return to later (possibly including a breakdown of
my <code class="language-plaintext highlighter-rouge">.vimrc</code>).</p>

<h3 id="how-to-get-started-1">How to get started</h3>

<p>Like I said before, Vim is famous for having a bit of a steep learning curve.
I’d recommend trying it out in your leisure time because it <em>will</em> slow you down
at first.</p>

<p>Once again, the download for the newest version (probably more up to date than
what you have on your machine already) is on Homebrew as well. However, I’d
recommend installing the relatively recent fork <code class="language-plaintext highlighter-rouge">neovim</code> instead (it has a few
nicities including better built-in tutorial:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install neovim
</code></pre></div></div>

<p>Launch it from the shell (using the name <code class="language-plaintext highlighter-rouge">nvim</code>, <em>not</em> <code class="language-plaintext highlighter-rouge">neovim</code>). Then I’d
follow the built-in tutorial by typing <code class="language-plaintext highlighter-rouge">:Tutor</code>. The first online resource given
at the bottom of the tutorial, <a href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/">“Learn Vim
Progressively”</a> is also great—it’s how I first
started.</p>

<h2 id="fzf">FZF</h2>

<p>FZF is a fuzzy-finder for the shell that you can use in a bunch of different
ways, like…</p>

<h3 id="finding-files-while-also-obeying-your-gitignore">Finding files (while also obeying your <code class="language-plaintext highlighter-rouge">.gitignore</code>)<sup id="fnref:vim-color-note" role="doc-noteref"><a href="#fn:vim-color-note" class="footnote" rel="footnote">7</a></sup></h3>
<script src="https://asciinema.org/a/28rDzTqI5nEE9mM89DKZmf5Zo.js" id="asciicast-28rDzTqI5nEE9mM89DKZmf5Zo" async=""></script>

<h3 id="finding-git-commits">Finding git commits</h3>
<script src="https://asciinema.org/a/xYrk74sFKjQXzGKEPJSrdypXs.js" id="asciicast-xYrk74sFKjQXzGKEPJSrdypXs" async=""></script>

<h3 id="finding-old-commands">Finding old commands</h3>
<p>I couldn’t manage to record this one without any potentially sensitive
information, but it works as you might expect.</p>

<p>At its core, FZF is just a way of filtering data in a human-friendly way. You
can pipe anything in and get the same fuzzy-find interface
(e.g. <code class="language-plaintext highlighter-rouge">cat file.txt | fzf</code>).</p>

<h3 id="how-to-get-started-2">How to get started</h3>

<p>Once again, if you can, just use Homebrew.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install fzf
</code></pre></div></div>

<p>See <a href="https://github.com/junegunn/fzf#using-homebrew-or-linuxbrew">the project’s installation instructions</a> for
details, including howt to integrate FZF with tmux and vim. These integrations
work incredibly well so I’d highly recommend setting that up.</p>

<div style="text-align: center;">•••</div>

<p>That’s it for now! More posts on this stuff to come, I’m sure.</p>

<!--footnotes & references-->

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://ergonomics.ucla.edu/injuries-and-prevention/eye-strain.html">https://ergonomics.ucla.edu/injuries-and-prevention/eye-strain.html</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="https://lifehacker.com/5818056/how-do-i-prevent-eyestrain">https://lifehacker.com/5818056/how-do-i-prevent-eyestrain</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">

      <p>This isn’t a cure-all for repetitive strain injuries. Stretching and
regular breaks are more important. <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:wizardry" role="doc-endnote">

      <p>It can be a great way to learn tricks
when you see someone do some keyboard wizardry and you ask “How did you do that!?” <a href="#fnref:wizardry" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>The main reason for using it over the default macOS Terminal is for 256 color support. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:cycle" role="doc-endnote">

      <p>Just as a heads up: you can cycle through open applications with
<kbd>&#8984;</kbd>+<kbd>tab</kbd> and open windows for your current
application with <kbd>&#8984;</kbd>+<kbd>`</kbd>. <a href="#fnref:cycle" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:vim-color-note" role="doc-endnote">

      <p>I’m not sure why the colors on this recording are inaccurate,
but I assure you Vim on my machine is quite colorful. I use the colorscheme
<a href="https://github.com/junegunn/seoul256.vim">seoul256</a>. <a href="#fnref:vim-color-note" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[Core philosophy]]></summary></entry></feed>