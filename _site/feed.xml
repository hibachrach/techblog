<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://challahscript.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://challahscript.com/" rel="alternate" type="text/html" /><updated>2024-05-09T23:53:01-07:00</updated><id>https://challahscript.com/feed.xml</id><title type="html">ChallahScript</title><subtitle>Hazel Bachrach&apos;s technical blog. Should include some dumb and not-so-dumb stuff about software engineering.</subtitle><entry><title type="html">JavaScript Improvements</title><link href="https://challahscript.com/javascript_improvements" rel="alternate" type="text/html" title="JavaScript Improvements" /><published>2020-10-07T00:00:00-07:00</published><updated>2020-10-07T00:00:00-07:00</updated><id>https://challahscript.com/javascript_improvements</id><content type="html" xml:base="https://challahscript.com/javascript_improvements"><![CDATA[<p>In this article I go over three things that, in my mind, would make JavaScript
better. None are new ideas. This post is an expansion of a tweet I had when I saw
someone asking about improvements for JS. (though probably are impossible for
various reasons). I’m going to be primarily speaking about browsers and the web,
though much of this might apply to Node.js (though I’m not as familiar with that
area so I can’t speak on it confidently).</p>

<h1 id="versions-for-js">Versions for JS</h1>

<p>Just as a heads up: I’m not really talking about different ECMAScript versions
(e.g. ES6, ES2019, etc.) here–I’m talking about how most programming languages
refer to versions.</p>

<p>Right now, there are two versions of JS: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode">Strict mode</a> and <a href="https://developer.mozilla.org/en-US/docs/Glossary/Sloppy_mode">“sloppy
mode”</a>. Feature detection is done dynamically: if a
script makes use of any feature or change in the language that isn’t supported
by the environment running it, it will error, either silently or loudly
depending on what that feature is.</p>

<p>To get around this, developers do one or both of the following:</p>

<h2 id="strategy-1-transpilepolyfill-to-the-lowest-common-denominator">Strategy 1: Transpile/polyfill to the lowest common denominator</h2>

<p>To get around browsers not supporting features, we use tools like <a href="https://babeljs.io/">Babel</a>
to convert JS making use of newer features to JS supported by all or polyfill
them with. However, this
has a few problems:</p>

<ol>
  <li>Most of the time, the transpilation increases file size and parsing time.
<a href="https://babeljs.io/repl#?browsers=ie%2011e&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=GYewTgBAFAxiB2BnALhAhhEwICMCUEA3gFAC-QA&amp;debug=false&amp;forceAllTransforms=true&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=es2015&amp;prettier=false&amp;targets=&amp;version=7.11.6&amp;externalPlugins=">Here</a> is a dramatic instance of that (<a href="https://babeljs.io/docs/en/faq#why-is-the-output-of-forof-so-verbose-and-ugly">not that this is
Babel’s fault…</a>). This is despite the fact that most
browsers don’t need this extra code.</li>
  <li>Transpilation requires a target platform. For now, it seems like the defacto
standard is ES5, but this is already changing: websites that can afford to
drop older browsers like IE11 are doing so (e.g. GitHub). What is the <em>right</em>
target? This might get harder to answer once IE11 disappears and we truly
only need to support evergreen (i.e. silently auto-updating) browsers.
Different browsers might implement features in different orders. Automated
tools like <a href="https://github.com/browserslist/browserslist"><code class="language-plaintext highlighter-rouge">browserslist</code></a> reduce the impact of this point,
but they require upkeep. If a website stops development now but stays online,
its JS bundle won’t get any faster despite the herd of browsers moving to
support the newer features in the source JS.</li>
  <li>If one takes shortcuts (via options like “loose mode” for various Babel
transpilations) you could actually be introducing bugs by fragmenting the
underling semantics of a particular feature (though I admit this problem is
not super likely).</li>
  <li>Transpilation does not get around efforts to dramatically evolve the JS
language (especially those which remove old baggage). Syntax that is
fundamentally incompatible with old and seldom-used features simply can’t be
introduced because we <a href="https://www.w3.org/TR/html-design-principles/#support-existing-content">can’t break the web</a>.</li>
</ol>

<h2 id="strategy-2-offer-different-bundles-to-different-platforms-based-on-proxies">Strategy 2: Offer different bundles to different platforms based on proxies</h2>

<p>The idea is that you can identify what a browser might need based on the version
presented in its “user agent” (UA). There’s <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent">a whole article on MDN on why this is a
bad idea in general</a>. However, this hasn’t stopped
influential companies like Twitter from <a href="https://twitter.com/CharlieCroom/status/1291478104016289799">doing it</a>.</p>

<p>Google Developers instead <a href="https://web.dev/codelab-serve-modern-code/#using-es-modules-with-babel">encourages using the support for <code class="language-plaintext highlighter-rouge">&lt;script
type="module"&gt;</code> as a discriminating factor</a>. This seems a bit
better, but of course this is just one test–<a href="https://thingsthemselves.com/reminder-safari-is-not-an-evergreen-browser/">Safari is not an evergreen
browser</a> and so despite it supporting modules, we can’t
rely on this to check for support for “generally new feature” availability in
the medium or long-term.</p>

<h2 id="how-versioning-fits-in">How versioning fits in</h2>

<p>As I said at the beginning, there already is a versioning scheme for JS. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode">Strict
mode</a> changes the behavior of JS scripts in a backwards
incompatible way: if you had a script that worked in “sloppy mode”, it might
break in strict mode.</p>

<p>However, it doesn’t look like there are any plans to further extend this
approach. When <a href="https://developers.google.com/web/updates/2018/03/smooshgate">“#SmooshGate”</a> (an incident of browsers accidentally
breaking sites relying on old JS extensions by adding incompatible features)
happened, versioning was suggested by <a href="https://www.reddit.com/r/javascript/comments/8ln83r/at_todays_tc39_meeting_smooshgate_was_resolved_by/dzhvvhy?utm_source=share&amp;utm_medium=web2x&amp;context=3">more</a>
<a href="https://news.ycombinator.com/item?id=17141522">than</a> <a href="https://news.ycombinator.com/item?id=17141494">one</a>
<a href="https://dev.to/joelnet/a-pragmatic-solution-to-flatten-proposal-problem-smooshgate-javascript--jal">person</a>. After all, with versioned JS, the issue
evaporates. Commenters on Hacker News responded to these suggestions, suggesting
that supporting multiple distinct versions <a href="https://news.ycombinator.com/item?id=17141024">introduces significant complexity
for developers of JS engines</a>. One person even
<a href="https://news.ycombinator.com/item?id=17143251">noted</a></p>
<blockquote>
  <p>This has been discussed at length and they have decided not to do it. It’s not
a missing feature, it’s by design.</p>
</blockquote>

<p>There are other negatives to versioning expounded on in <a href="https://exploringjs.com/es6/ch_one-javascript.html#sec_versioning">this wonderful
article</a>, such as the following quoted here:</p>

<blockquote>
  <ul>
    <li>Engines become bloated, because they need to implement the semantics of all
versions. The same applies to tools analyzing the language (e.g. style
checkers such as JSLint).</li>
    <li>Programmers need to remember how the versions differ.</li>
    <li>Code becomes harder to refactor, because you need to take versions into
consideration when you move pieces of code.</li>
  </ul>
</blockquote>

<p>I can’t speak much to the work of maintaining engines–this is done by engineers
far more skilled than myself. My immediate reaction is that managing different
versions might enable stricter handling of various code, leading to
simplification, though that’s probably a naive perspective.</p>

<p>On the topic of remembering how versions differ, I would say this is simple in
comparison to the inconsistent mess of browser compatibility, JS transpilation
configuration, and generally frequent change within the ecosystem (though I will
be the first to say that the last point has been fairly exaggerated). In other
languages, versions change, and this is considered business as usual.</p>

<p>With regards to added difficulty in refactoring, I would say that this again is
probably simpler than other things which we do semi-regularly, such as upgrading
major versions of important libraries (e.g. jQuery, webpack), and is likely able
to be automated. Additionally, the difficulty is highly dependent on the
audacity of those at the reins of JavaScript, who, based on the current
environment, seem unlikely to cause unnecessary upset.</p>

<h1 id="everything-is-an-expression">Everything is an expression</h1>

<p>The main area where I wish this were the standard within JS is with <code class="language-plaintext highlighter-rouge">if</code>/<code class="language-plaintext highlighter-rouge">else</code>,
<code class="language-plaintext highlighter-rouge">try</code>/<code class="language-plaintext highlighter-rouge">catch</code>, and <code class="language-plaintext highlighter-rouge">switch</code>/<code class="language-plaintext highlighter-rouge">case</code> statements. This is something that I use very
frequently within Ruby</p>

<h2 id="example-ifelse">Example: <code class="language-plaintext highlighter-rouge">if</code>/<code class="language-plaintext highlighter-rouge">else</code></h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">cond</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">b</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">c</span>
  <span class="p">};</span>
</code></pre></div></div>

<h2 id="example-trycatch">Example: <code class="language-plaintext highlighter-rouge">try</code>/<code class="language-plaintext highlighter-rouge">catch</code></h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">somethingThatMightFail</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">fallbackValue</span>
  <span class="p">};</span>
</code></pre></div></div>

<h2 id="example-switchcase">Example: <code class="language-plaintext highlighter-rouge">switch</code>/<code class="language-plaintext highlighter-rouge">case</code></h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span>
  <span class="k">switch</span> <span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">apple</span><span class="dl">'</span> <span class="p">{</span>
      <span class="dl">'</span><span class="s1">fruit</span><span class="dl">'</span>
    <span class="p">}</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">broccoli</span><span class="dl">'</span> <span class="p">{</span>
      <span class="dl">'</span><span class="s1">vegetable</span><span class="dl">'</span>
    <span class="p">}</span>
    <span class="k">default</span> <span class="p">{</span>
      <span class="dl">'</span><span class="s1">unknown</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">};</span>
</code></pre></div></div>

<p>Its possible this would need to use different keywords to replace <code class="language-plaintext highlighter-rouge">case</code> and
<code class="language-plaintext highlighter-rouge">default</code> for the sake of JS interpreters and maximizing backwards
compatibility because <code class="language-plaintext highlighter-rouge">case</code>s function as labels.</p>

<h2 id="current-proposals">Current proposals</h2>

<p>To achieve this, <code class="language-plaintext highlighter-rouge">do</code> expressions were <a href="https://github.com/tc39/proposal-do-expressions">proposed 2 years
ago</a>, which satisfy the requirements with slightly
more verbose syntax. E.g. for the <code class="language-plaintext highlighter-rouge">if</code>/<code class="language-plaintext highlighter-rouge">else</code>, you’d write</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">do</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">cond</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">b</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">c</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>However, the proposal is still at stage 1 of <a href="https://tc39.es/process-document/">the 4-stage TC39 (effective JS
steering committee) process</a>, though <a href="https://github.com/tc39/proposal-do-expressions/issues/49">it’s still being
discussed</a>. Some have asked “why do we need the <code class="language-plaintext highlighter-rouge">do</code>?”
and make the first syntax (without the explicit <code class="language-plaintext highlighter-rouge">do</code>) part of the language,
though <a href="https://github.com/tc39/proposal-do-expressions/issues/39#issuecomment-468645498">this can’t be done without interfering with existing uncommon language
features</a> (another example of not being able to change syntax due
to “version constraint”)</p>

<h1 id="improved-caching">Improved caching</h1>

<p>I would explain this, but there are actually people <a href="https://www.pika.dev/">already solving this
problem</a>, and they’ve put together <a href="https://www.pika.dev/about">this article explaining how
caching can be improved around the web</a>.</p>

<p>However, there are still unresolved issues here: how does this work for
different browser targets? It’s fine if all libraries are only using
browser-supported features, but we all know that that won’t be consistent for
all features across all browsers into the future. A lot of this builds on the
issues presented in the section on versioning above: if there are no ways to
talk consistently about versioning, then it’s much harder to solve these
problems in an automated way.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[In this article I go over three things that, in my mind, would make JavaScript better. None are new ideas. This post is an expansion of a tweet I had when I saw someone asking about improvements for JS. (though probably are impossible for various reasons). I’m going to be primarily speaking about browsers and the web, though much of this might apply to Node.js (though I’m not as familiar with that area so I can’t speak on it confidently).]]></summary></entry><entry><title type="html">A Hierarchy of Documentation</title><link href="https://challahscript.com/hiearchy_of_documentation" rel="alternate" type="text/html" title="A Hierarchy of Documentation" /><published>2020-04-24T00:00:00-07:00</published><updated>2020-04-24T00:00:00-07:00</updated><id>https://challahscript.com/hiearchy_of_documentation</id><content type="html" xml:base="https://challahscript.com/hiearchy_of_documentation"><![CDATA[<p>“Where should this information live?” is a common question I encounter daily as
a software engineer. I (alone or in consultation with others) will make a
decision and that information needs to persist…somewhere. The goal of course
is to prevent some future engineer (often myself) from encountering some code
and asking “why?” or, even worse, “what?”.</p>

<p>I’ve found there’s a sort of hierarchy to the accessibility
of various information that I found useful in sharing.</p>

<p>In order of most accessible to least, the hierarchy is as follows:</p>

<ol>
  <li>Code (identifiers)</li>
  <li>In-code comments</li>
  <li>Commit messages</li>
  <li>Pull/merge requests &amp; issue trackers</li>
</ol>

<p>This list may be different for other people and may change in time as tools
get better, but for now, this has held true for me.</p>

<p>I’m sure that similar things have also been said before. Shoulders of giants and
all that—would love to read any previous writings on similar topics!</p>

<p>So! Let’s get into some of the reasoning…</p>

<h2 id="code-identifiers">Code (Identifiers)</h2>

<h3 id="accessibility">Accessibility</h3>

<p>By far, the most important place to put information is in the code itself. Why?</p>

<ul>
  <li>It can be easily searched with tools like <code class="language-plaintext highlighter-rouge">grep</code>, <code class="language-plaintext highlighter-rouge">ag</code>, <code class="language-plaintext highlighter-rouge">ripgrep</code>, or your
favorite file searcher</li>
  <li>It (generally) follows a predictable structure and connections between
components can be traced (e.g. through the call stack)</li>
  <li>It is <em>very</em> unlikely to be discarded accidentally</li>
</ul>

<h3 id="responsibilities">Responsibilities</h3>

<p>Because of their inherent visibility, identifiers<sup id="fnref:identifiers_meaning" role="doc-noteref"><a href="#fn:identifiers_meaning" class="footnote" rel="footnote">1</a></sup> should
always be the first place to put information, especially</p>

<ul>
  <li>What values represent</li>
  <li>What functions do &amp; how they do it</li>
  <li>(Sparingly) when functions are invoked<sup id="fnref:identifiers_when" role="doc-noteref"><a href="#fn:identifiers_when" class="footnote" rel="footnote">2</a></sup></li>
</ul>

<h3 id="identifiers-and-code-simplification">Identifiers and Code Simplification</h3>

<p>I’m going to intentionally give you no context for the following code:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span>
  <span class="nx">userSession</span><span class="p">[</span><span class="dl">'</span><span class="s1">signed</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">update</span><span class="dl">'</span><span class="p">]</span> <span class="o">||</span>
  <span class="nx">AdminOverrides</span><span class="p">[</span><span class="nx">userSession</span><span class="p">[</span><span class="dl">'</span><span class="s1">signed</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">]]</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="nx">repository</span><span class="p">.</span><span class="k">delete</span><span class="p">();</span>
  <span class="k">return</span> <span class="nx">render</span><span class="p">({</span>
    <span class="na">status</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
    <span class="na">body</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">notice</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Repository successfully deleted.</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">render</span><span class="p">({</span>
    <span class="na">status</span><span class="p">:</span> <span class="mi">403</span><span class="p">,</span>
    <span class="na">body</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">errors</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">You are not allowed to perform that action.</span><span class="dl">'</span><span class="p">]</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Okay, pretty straightforward. But consider this version instead:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">userHasUpdateAccess</span> <span class="o">=</span> <span class="p">(</span>
  <span class="nx">userSession</span><span class="p">[</span><span class="dl">'</span><span class="s1">signed</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">admin</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">update</span><span class="dl">'</span><span class="p">]</span> <span class="o">||</span>
  <span class="nx">AdminOverrides</span><span class="p">.</span><span class="nx">update</span><span class="p">[</span><span class="nx">userSession</span><span class="p">[</span><span class="dl">'</span><span class="s1">signed</span><span class="dl">'</span><span class="p">][</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">]]</span>
<span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">userHasAdminUpdateAccess</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">repository</span><span class="p">.</span><span class="k">delete</span><span class="p">();</span>
  <span class="k">return</span> <span class="nx">render</span><span class="p">({</span>
    <span class="na">status</span><span class="p">:</span> <span class="nx">STATUS_CODES</span><span class="p">.</span><span class="nx">ok</span><span class="p">,</span>
    <span class="na">body</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">notice</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Repository successfully deleted.</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">render</span><span class="p">({</span>
    <span class="na">status</span><span class="p">:</span> <span class="nx">STATUS_CODES</span><span class="p">.</span><span class="nx">unauthorized</span><span class="p">,</span>
    <span class="na">body</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">errors</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">You are not allowed to perform that action.</span><span class="dl">'</span><span class="p">]</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We’ve made a few updates. First, we’ve pulled the condition out into its own
variable. What that’s done is document the intention of what the condition is
<em>supposed</em> to mean. This has a few benefits:</p>

<ul>
  <li><strong>Each line is doing less, cognitively.</strong> That means you have to think about
less when reading. You’re going to read code way more than you’re going to
write it—why make it harder for yourself?<sup id="fnref:code_boring_good" role="doc-noteref"><a href="#fn:code_boring_good" class="footnote" rel="footnote">3</a></sup></li>
  <li><strong>Pulling that connection out and labeling it makes it harder to miss when
changes happen.</strong> At some point, how we determine whether a user has
update access will probably change. Additionally, the body of the first branch
of the <code class="language-plaintext highlighter-rouge">if</code> may get much larger. It’s always easier to keep things tidy one
piece at a time (as opposed to going back and cleaning it up later)!</li>
</ul>

<p>The other two changes are to replace the HTTP status codes (which are
essentially <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)">magic numbers</a>) with references to a global
<code class="language-plaintext highlighter-rouge">STATUS_CODES</code> object. While HTTP status codes are fairly well known (e.g. a
“404” is meaningful to many that have never done web development), they’re
likely not going to be better known than English.</p>

<p>Generally, breaking things down like this makes the answer to “why?” very
obvious.</p>

<h3 id="caveat-enigmatic-language-syntax">Caveat: Enigmatic language syntax</h3>

<p>Unlike libraries which can often be worked around, specific hard-to-parse
features of a language’s syntax may be unavoidable. For example, most languages
have regular expressions which are infamous for how easy they are to mess up.
Consider the following regular expression in JavaScript:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">IS_VALID_EMAIL_REGEX</span> <span class="o">=</span> <span class="sr">/^</span><span class="se">[^</span><span class="sr">@</span><span class="se">]</span><span class="sr">+@</span><span class="se">[^</span><span class="sr">@</span><span class="se">]</span><span class="sr">+$/</span><span class="p">;</span>
</code></pre></div></div>

<p>There’s not really much more we can do in terms of adding/changing identifiers
to clarify how the regular expression determines which email addresses are valid
and which aren’t–you just have to know the specific syntax of (JavaScript)
regular expressions. In cases like these, an in-code comment (which we’ll talk
about more in the next section) is the next best place to put this information:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Matches one or more non-`@` characters, folloed by a `@` character, followed</span>
<span class="c1">// by one or more non-`@` characters.</span>
<span class="kd">const</span> <span class="nx">IS_VALID_EMAIL_REGEX</span> <span class="o">=</span> <span class="sr">/^</span><span class="se">[^</span><span class="sr">@</span><span class="se">]</span><span class="sr">+@</span><span class="se">[^</span><span class="sr">@</span><span class="se">]</span><span class="sr">+$/</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="in-code-comments">In-code comments</h2>

<h3 id="accessibility-1">Accessibility</h3>

<p>One of the points made about code also apply to in-code comments: they are
easily searchable using a file searcher. Also, they do not need any further
seeking out than code,<sup id="fnref:dimmed_comments" role="doc-noteref"><a href="#fn:dimmed_comments" class="footnote" rel="footnote">4</a></sup> unlike something like commit messages.</p>

<p>However, as they are in a non-programming language, they can be a bit less
predictable in terms of structure—you’ll have a harder of a time breaking an
English sentence into an abstract syntax tree than compared with something like
JavaScript!</p>

<p>Additionally, in-code comments are related to their subjects
typically by proximity alone. If someone moves that code without taking the
comment with it, the comment ceases to be helpful (or, worse, becomes
confusing/misleading). We talk about this more in the <a href="#common-pitfall-poor-comment-location">“Pitfall”
section</a> below.</p>

<h3 id="responsibilities-1">Responsibilities</h3>

<p>Comments, while still being very visible, afford a much greater level of
flexibility in comparison with code identifiers for documenting behavior,
decisions, etc. Comments are where you put</p>

<ul>
  <li>Explanations of why a section of code is the way that it is</li>
  <li>Explanations of why a section of code <em>isn’t</em> written another way <strong>if one may
be tempted to rewrite it</strong></li>
  <li>Contextual information for where a code snippet came from if possibly helpful
to future readers<sup id="fnref:snippet_came_from" role="doc-noteref"><a href="#fn:snippet_came_from" class="footnote" rel="footnote">5</a></sup></li>
  <li>Explanations of <a href="#caveat-enigmatic-language-syntax">enigmatic language syntax</a></li>
  <li>(Sparingly) warnings and assumptions<sup id="fnref:warnings_and_assumptions" role="doc-noteref"><a href="#fn:warnings_and_assumptions" class="footnote" rel="footnote">6</a></sup></li>
</ul>

<h3 id="common-pitfall-poor-comment-location">Common Pitfall: Poor Comment Location</h3>

<p>For example, say we have this method:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Must be done in reverse order to be done in O(N) time due to</span>
<span class="c1">// Kleppner's Law of Stupid Data Structures</span>
<span class="kd">function</span> <span class="nx">smooshify</span><span class="p">(</span><span class="nx">newElements</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">newElements</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">flarbo</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">newElements</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>At some later point, it turns out are some <code class="language-plaintext highlighter-rouge">null</code> elements that need to be
screened out:<sup id="fnref:null_screening" role="doc-noteref"><a href="#fn:null_screening" class="footnote" rel="footnote">7</a></sup></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Must be done in reverse order to be done in O(N) time due to</span>
<span class="c1">// Kleppner's Law of Stupid Data Structures</span>
<span class="kd">function</span> <span class="nx">smooshify</span><span class="p">(</span><span class="nx">newElements</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">nonNullNewElements</span> <span class="o">=</span> <span class="nx">newElements</span><span class="p">.</span><span class="nx">withoutNulls</span><span class="p">();</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">newElements</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">flarbo</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">nonNullNewElements</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>With the code as it is now, another dev may stumble along one day and ask “Is
<code class="language-plaintext highlighter-rouge">withoutNulls</code> iterating in reverse order?” While this may be a bit of a trivial
example, these things can lead to a lot more headache down the line</p>

<p>The only way to truly avoid mistakes like this is by is by keeping a vigilant
eye on comments. Some techniques I’ve found to be helpful:</p>

<ul>
  <li>
    <p>Keep comments as closely positioned to the code they’re describing as
possible. E.g. if talking about code in the first branch of an <code class="language-plaintext highlighter-rouge">if</code> statement,
put that comment <strong>in the first branch</strong>, not above the entire statement:</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// comment about why `floarp` should be used --- BAD</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">somethingOrOther</span><span class="p">())</span> <span class="p">{</span>
  <span class="c1">// comment about why `floarp` should be used --- GOOD</span>
  <span class="nx">floarp</span><span class="p">();</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">blarg</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Make references to specific identifiers in comments as these tend to garner
more attention and help establish a more explicit relationship between the
comment and the code</p>
  </li>
</ul>

<h2 id="commit-messages">Commit Messages</h2>

<p>Most code that I’ve interacted with is version-controlled with something like
Git, and if not Git, some other version-control software like Mercurial. I’m
going to be referring to Git exclusively in this section, but I’m sure that
there are similar tools for other version-control software.</p>

<h3 id="accessibility-2">Accessibility</h3>

<p>Unlike code or in-code comments, commit messages are not immediately visible
when browsing a codebase. However, they can be made much more easily accessible
with tools like <a href="https://github.com/tpope/vim-fugitive">Fugitive</a> (for Vim) or
<a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">GitLens</a>
(for VSCode). However, they can be searched–just run <code class="language-plaintext highlighter-rouge">git log</code> and press
<kbd>/</kbd> and <em>BAM</em>! You can search through all your commit history (thanks
to <a href="https://en.wikipedia.org/wiki/Less_(Unix)"><code class="language-plaintext highlighter-rouge">less</code></a>)</p>

<p>Unfortunately, commit messages can sometimes be squashed or lost during a
rebase, so the information placed there may not be preserved forever, though
this mostly depends upon the other collaborators working on the repository.</p>

<h3 id="responsibilities-2">Responsibilities</h3>

<p>Much has been written about <a href="https://chris.beams.io/posts/git-commit/">how to write good commit
messages</a>, so I won’t be too
comprehensive here. However, I’d say the things I’m talking about here are, in
my opinion, the most important things about writing a useful commit message.  As
much as I like consistency, the grammatical aspects of commit message guidelines
are not nearly as helpful as guidelines on the <em>content</em> of the message (as long
as it’s readable!).</p>

<p>Commit messages are all about change. A commit itself is an object representing
a change to a codebase and commit messages ought to do the following:</p>

<ul>
  <li>Briefly summarize what changed, from a high level</li>
  <li>Explain why the changes in the commit are necessary</li>
  <li>Explain why other possible strategies were <em>not</em> attempted, if relevant</li>
</ul>

<p>These are much easier to accomplish when the commits you make are small and
focused (within reason).<sup id="fnref:atomic_commits" role="doc-noteref"><a href="#fn:atomic_commits" class="footnote" rel="footnote">8</a></sup></p>

<h3 id="tip-using-references-to-other-commits">Tip: using references to other commits</h3>

<p>While commit messages allow you to tell a story, any single commit rarely allows
you to tell the whole story. If referencing earlier changes, I highly encourage
you to make such references by using the commit hash. This will enable those
reading those commit messages later to gain the same context you had when
writing the message in the first place with a simple <code class="language-plaintext highlighter-rouge">git show</code>. A word of
warning however: commit hashes will change when you rebase or amend a commit, so
if referencing an earlier commit in a commit message, make sure to update that
hash if the earlier commit is ever altered.</p>

<h2 id="pullmerge-requests--issue-trackers">Pull/merge requests &amp; issue trackers</h2>

<p>These are your GitHubs, your Asanas, your Jiras. I’m lumping issue trackers and
hosted version control together because some of these services function as both
(e.g.  GitHub).</p>

<h3 id="accessibility-3">Accessibility</h3>

<p>While there’s a large amount of variance here, I always have found messages and
comments to get lost somehow, even when generally good search functionality is
present.  Some services are better than others at this, but even in GitHub
(which automatically doubly-link issues to pull requests), comments will be
collapsed or hidden in large pull requests, making them a pain to excavate.</p>

<h3 id="responsibilities-3">Responsibilities</h3>

<p>These services are all about facilitating conversation and communication. As
such, their responsibilities are focused on those topics:<sup id="fnref:use_of_trackers" role="doc-noteref"><a href="#fn:use_of_trackers" class="footnote" rel="footnote">9</a></sup></p>

<ul>
  <li>Documenting why certain changes weren’t done and/or aren’t worth doing
    <ul>
      <li>However, these should instead be put in the relevant commit messages if they
are related to certain changes that <em>did</em> make it into the codebase</li>
    </ul>
  </li>
  <li>Containing or summarizing deliberation about proposed changes, even when that
deliberation happens in real life or on something like Slack</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>Hope you found this helpful in answering the question “where do I put this
information?”. If you have any thoughts, <a href="https://twitter.com/hibachrach">I’m on Twitter</a>.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:identifiers_meaning" role="doc-endnote">

      <p>Identifiers include variable names, function names,
class names/types, operators—basically anything that has a name that you can
control! <a href="#fnref:identifiers_meaning" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:identifiers_when" role="doc-endnote">

      <p>I’ll probably make another post about this, but I’ve found
answering the question of “when” to be a bit of a slippery slope, especially
in function names. When you answer the question of “when”, you are often doing
so at the expense of “what”. Who hasn’t written a function like <code class="language-plaintext highlighter-rouge">onClick</code> or
<code class="language-plaintext highlighter-rouge">after_save</code> that spans 20+ lines, accomplishing many disparate tasks? One
technique I’ve employed when these are unavoidable (as these identifiers are
often dictated by some external API) is to push all sense of “how” out of the
bodies of these functions—they merely list off the things to do and the “how”
is pushed into other functions. If you read on, we’re trying to lighten
cognitive load here! <a href="#fnref:identifiers_when" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:code_boring_good" role="doc-endnote">
      <p><a href="https://www.google.com/search?q=code+boring+good">This is not a new idea</a>. <a href="#fnref:code_boring_good" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:dimmed_comments" role="doc-endnote">
      <p>However, they may be slightly dimmed depending on the code editor. <a href="#fnref:dimmed_comments" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:snippet_came_from" role="doc-endnote">
      <p>I most often use this for adaptations of code from StackOverflow or blog posts. <a href="#fnref:snippet_came_from" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:warnings_and_assumptions" role="doc-endnote">

      <p>If possible, these should be replaced with good identifier naming, type
checking, validations, etc. <a href="#fnref:warnings_and_assumptions" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:null_screening" role="doc-endnote">

      <p>If this were real code, I would hope that someone would also
leave a comment explaining why we are doing this screening! <a href="#fnref:null_screening" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:atomic_commits" role="doc-endnote">

      <p>I found <a href="https://www.freshconsulting.com/atomic-commits/">this article</a> a great summary of the how/why
of keeping commits small <a href="#fnref:atomic_commits" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:use_of_trackers" role="doc-endnote">

      <p>Of course, these services have usages beyond the topics
addressed in this post like:</p>
      <ul>
        <li>centralizing the agreed upon priority of upcoming work</li>
        <li>establishing the owner(s) of specific tasks</li>
        <li>informing those outside the dev team about the progress of tasks, etc.</li>
      </ul>
      <p><a href="#fnref:use_of_trackers" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[“Where should this information live?” is a common question I encounter daily as a software engineer. I (alone or in consultation with others) will make a decision and that information needs to persist…somewhere. The goal of course is to prevent some future engineer (often myself) from encountering some code and asking “why?” or, even worse, “what?”.]]></summary></entry><entry><title type="html">A Brief Tour of Tools</title><link href="https://challahscript.com/tools" rel="alternate" type="text/html" title="A Brief Tour of Tools" /><published>2018-04-01T00:00:00-07:00</published><updated>2018-04-01T00:00:00-07:00</updated><id>https://challahscript.com/tools</id><content type="html" xml:base="https://challahscript.com/tools"><![CDATA[<h2 id="core-philosophy">Core philosophy</h2>

<h3 id="make-your-tools-as-ergonomic-as-possible">Make your tools as ergonomic as possible</h3>

<p>Ergonomics often comes up when talking with HR during onboarding: it’s the
reason why you should use comfortable, supportive chairs, keyboards, mice, and
such. “Battle scars” from work shouldn’t be encouraged. If your eyes, wrists, or
butt cheeks are hurting, try to address that problem. You’re doing labor. Labor
that most likely isn’t as tolling, as say, construction, but labor nonetheless.
Take care of your body. If you try to fight it, it’s likely to win. Even if
you’re not feeling active pain now, you might start experiencing symptoms after
years of damage. “It works for me” shouldn’t be the end of it. Get an ergonomic
chair, keyboard, and mouse to reduce strain. Here<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup><sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> are some good
guidelines on reducing eyestrain (I can personally vouch for tools like
<a href="https://justgetflux.com/">f.lux</a>!).</p>

<p>What does this mean for software? If you don’t like the way you’re interacting
with your tools (physical <em>or</em> virtual), you’re not going to have as much fun
using them.</p>

<p>Sometimes that can be a <em>good</em> thing: if a tool
<em>shouldn’t</em> be used, then you can design your system with that idea in mind. As
we are all designers in some way, this should be a familiar idea—e.g. if you
add a feature that forces a user to do 10 clicks instead of one, they’re less
likely to use that feature (c.f. trying to close your Amazon account).</p>

<p>Notice that I’m not talking about speed. The amount of time that you save with
one configuration or another probably isn’t going to save you the amount of time
that you put into setting it up (unless something was <em>really</em> wrong
before-hand). But reducing UX friction can often make you more productive,
reduce extraneous repetitive motion, and eliminate unnecessary mental work to
get from point A to point B. Some things that help towards this end include:</p>

<ul>
  <li>Reducing mouse usage<sup id="fnref:4" role="doc-noteref"><a href="#fn:4" class="footnote" rel="footnote">3</a></sup></li>
  <li>Reducing chorded shortcuts (e.g. minimizing stuff like <kbd>shift</kbd>+<kbd>&#8984;</kbd>+<kbd>option</kbd>+<kbd>t</kbd>)</li>
  <li>Reducing the steps to switch between tools and contexts</li>
</ul>

<h3 id="make-your-tools-accessible-to-an-outsider-without-a-large-amount-of-reconfiguration">Make your tools accessible to an outsider without a large amount of reconfiguration</h3>

<p>Everything that you do to configure your machine is most likely increasing the
barrier to entry somehow. That’s okay. It’s your machine—it should be most
comfortable for <em>you</em>. However, that doesn’t mean there won’t be a time where
someone else might have to use your keyboard or read your monitor. It should be
easy enough for that visitor to understand what’s going on or do some simple
tasks without you restarting your damn machine. Note that that doesn’t mean
disabling all of your config when someone walks over<sup id="fnref:wizardry" role="doc-noteref"><a href="#fn:wizardry" class="footnote" rel="footnote">4</a></sup>.</p>

<h3 id="dont-overdo-it">Don’t overdo it</h3>

<p>Your tools or configuration won’t make you a significantly better developer. It
might even make you a more annoying developer if you won’t stop talking about
such topics. And it always takes time to customize these things—the increased
efficiency won’t make up for that. Again, it’s about getting you to enjoy using
the tools while reducing strain, whether that strain is physical or mental.</p>

<h2 id="tmux">tmux</h2>

<p>I use tmux inside of iTerm2<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">5</a></sup>. Tmux is a “terminal multiplexer” which is an
incredibly geeky way of saying it allows you to have windows/splits inside of a
OS level window. Here are my main motivations for using it.</p>

<h3 id="attach-and-detach">Attach and detach</h3>

<p>When you start up tmux you’re starting up a server, on which you create and
attach “sessions” (basically just workspaces) where you can create windows
(really closer to tabs) which can have splits. These sessions can be attached
to and detached from at will. And that action is a completely distinct one from
opening or closing iTerm2, meaning if iTerm2 has to close for one reason or
another, my windows and splits set up exactly as when I left them.</p>

<p>This is great on a local machine but invaluable on remote sessions: when I was
doing research on machines that could only be SSH’d into, a random drop in the
Internet connection just meant I had to reattach to the session that was running
on the remote server. Note that the server will still die if your computer has
to restart.</p>

<p>I also find that this navigation is much easier than fiddling with actual
windows in a GUI. Which tend to be pretty poorly organized for search and
retrieval. Even in macOS, if I have a window that is minimized, I have to either
use my mouse to inspect my collection of hidden windows or cycle through them
using <kbd>control</kbd>+<kbd>f4</kbd><sup id="fnref:cycle" role="doc-noteref"><a href="#fn:cycle" class="footnote" rel="footnote">6</a></sup>.</p>

<h3 id="prefixes-over-chords">Prefixes over chords</h3>

<p>This is going to be a bit of a recurring theme, but tmux allows you to go from
split to split, window to window, or session to session without pressing many
keys <em>simultaneously</em>. Instead, you can define a common prefix (I have
<kbd>control</kbd>+<kbd>space</kbd>) and then press the tmux-specific shortcut
of your choosing.</p>

<h3 id="how-to-get-started">How to get started</h3>

<p>If you’re on a Mac, you can use Homebrew:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install tmux
</code></pre></div></div>

<p><a href="https://hackernoon.com/a-gentle-introduction-to-tmux-8d784c404340">Here’s</a> a tutorial to get you started.</p>

<h2 id="vimneovim">Vim/Neovim</h2>

<p>I could talk probably all day about Vim and why I love it. I’ll try to summarize
here to save your time and/or sanity. I <em>will</em> note that Vim has a fairly steep
learning curve but I find is worth it in the end. See <a href="http://www.terminally-incoherent.com/blog/2012/09/05/vim-is-a-usability-nightmare/">here</a> for
a great blogpost about Vim and usability.</p>

<h3 id="ubiquity">Ubiquity</h3>

<p>Vi or Vim is on basically every *nix machine that you might come across. If you
know how to use it in one place, you can use it anywhere.</p>

<h3 id="keyboard-first-design">Keyboard-first design</h3>

<p>Every interaction with Vim is intended to be done with the keyboard. There are
some things that <em>can</em> be done with the mouse (like scrolling or cursor
movement), but it’s primarily designed to be manipulated via the keyboard. That
makes it generally quite fast, eliminating the time to move your hand to the
mouse and back.</p>

<h3 id="composability">Composability</h3>

<p>This is probably the biggest and most Vim-specific point here. When you
manipulate text in Vim, you do so in a sort of “language”, complete with verbs,
nouns, adjectives, adverbs, etc.</p>

<p>Let’s say I’m editing a Ruby script and I’ve got this double negative here. We
want to make this a bit more readable, replacing the <code class="language-plaintext highlighter-rouge">unless</code> with an <code class="language-plaintext highlighter-rouge">if</code> and
the <code class="language-plaintext highlighter-rouge">empty?</code> with a <code class="language-plaintext highlighter-rouge">present?</code>.</p>

<script src="https://asciinema.org/a/HRBzkylrV8Bih8llxcEY8nJWV.js" id="asciicast-HRBzkylrV8Bih8llxcEY8nJWV" async=""></script>

<p>Here are all the key presses I needed to do to perform the above:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ciwifjjwwwct?presentjj:wq
</code></pre></div></div>

<p>Let’s break that down:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ciw</code>: This is basically a “sentence”. I’m pressing these keys them in what is
called “normal mode”. <code class="language-plaintext highlighter-rouge">c</code> means “change”, <code class="language-plaintext highlighter-rouge">i</code> means “inner”, and <code class="language-plaintext highlighter-rouge">w</code> means
“word”. “Change” means delete and then go into “insert mode”, the mode where
when I type, those characters appear on screen. I applied that “verb” to what
is called a “text object”. Here that “text object” is made up of the adjective
“inner” with the noun “word”.</li>
  <li><code class="language-plaintext highlighter-rouge">if</code>: This is just me typing the word “if”.</li>
  <li><code class="language-plaintext highlighter-rouge">jj</code>: This is a command I have set up for “insert mode” that gets me back to
“normal mode”. This is <kbd>escape</kbd> by default but I find this much
easier.</li>
  <li><code class="language-plaintext highlighter-rouge">www</code>: Here I’m pressing that “noun” <code class="language-plaintext highlighter-rouge">w</code> three times. Since there’s no “verb”
here, that just moves my cursor 1 “word” each time. I could have also typed
<code class="language-plaintext highlighter-rouge">3w</code> and achieved the same thing.</li>
  <li><code class="language-plaintext highlighter-rouge">ct?</code>: Here I’m using the same <code class="language-plaintext highlighter-rouge">c</code> verb but this time with the “noun” <code class="language-plaintext highlighter-rouge">t?</code>
which means “to <code class="language-plaintext highlighter-rouge">?</code>”, i.e. all the characters from my current position up to
(but not including) the next incidence of the character <code class="language-plaintext highlighter-rouge">?</code> on the current
line.</li>
  <li><code class="language-plaintext highlighter-rouge">present</code>: This is just me typing the word “present”.</li>
  <li><code class="language-plaintext highlighter-rouge">jj</code>: Same as before.</li>
  <li><code class="language-plaintext highlighter-rouge">:wq</code>: Here I’m performing what is known as a “command”. <code class="language-plaintext highlighter-rouge">:</code> gets me into
“command mode” (moving my cursor temporarily to the bottom of the Vim window)
where I then type <code class="language-plaintext highlighter-rouge">w</code> for “write” (meaning “save”) and <code class="language-plaintext highlighter-rouge">q</code> for “quit”.</li>
</ul>

<p>This is a simple example, but as you can see, you can mix and match all these
building blocks to manipulate your files in quite complex ways. Many Vim users
also create plugins that add core “parts of speech” to the editor. E.g.
<a href="https://github.com/tpope/vim-surround">vim-surround</a> enables the sequence <code class="language-plaintext highlighter-rouge">cs"'</code> which allows you to
“change the surrounding characters” (<code class="language-plaintext highlighter-rouge">cs</code>) from <code class="language-plaintext highlighter-rouge">"</code> to <code class="language-plaintext highlighter-rouge">'</code> as well as the
sequence <code class="language-plaintext highlighter-rouge">ysiw]</code> “add surrounding characters” (<code class="language-plaintext highlighter-rouge">ys</code>) to the “inner word” (<code class="language-plaintext highlighter-rouge">iw</code>),
specifically brackets (<code class="language-plaintext highlighter-rouge">]</code>).</p>

<h3 id="integration-with-the-terminal">Integration with the terminal</h3>

<p>(Partly thanks to tmux) I can run Vim in the same program that has my
<code class="language-plaintext highlighter-rouge">foreman</code> procs, my git interface, my logs, and pretty much everything else.
Switching between all of those things is super easy thanks to a plugin I use
called <a href="https://github.com/christoomey/vim-tmux-navigator">vim-tmux-navigator</a>. Basically I can use</p>

<ul>
  <li><kbd>control</kbd>+<kbd>h</kbd> (left)</li>
  <li><kbd>control</kbd>+<kbd>j</kbd> (down)</li>
  <li><kbd>control</kbd>+<kbd>k</kbd> (up)</li>
  <li><kbd>control</kbd>+<kbd>l</kbd> (right)</li>
</ul>

<p>to navigate between tmux and Vim panes indiscriminately.</p>

<p>When I need to run a test, I have a plugin called <a href="https://github.com/janko-m/vim-test">vim-test</a> that
allows me to run a test in a neighboring tmux pane and then interact with that
terminal session afterwards.</p>

<p>There are many other niceties here as well (e.g. sending the contents of a SQL
query edited in a Vim session to an interactive <code class="language-plaintext highlighter-rouge">psql</code> session) that I may go
into in a later post.</p>

<h3 id="so-much-more">So much more</h3>

<p>Again, I can talk about Vim all day (and probably will). There are many things
not covered here that I will return to later (possibly including a breakdown of
my <code class="language-plaintext highlighter-rouge">.vimrc</code>).</p>

<h3 id="how-to-get-started-1">How to get started</h3>

<p>Like I said before, Vim is famous for having a bit of a steep learning curve.
I’d recommend trying it out in your leisure time because it <em>will</em> slow you down
at first.</p>

<p>Once again, the download for the newest version (probably more up to date than
what you have on your machine already) is on Homebrew as well. However, I’d
recommend installing the relatively recent fork <code class="language-plaintext highlighter-rouge">neovim</code> instead (it has a few
nicities including better built-in tutorial:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install neovim
</code></pre></div></div>

<p>Launch it from the shell (using the name <code class="language-plaintext highlighter-rouge">nvim</code>, <em>not</em> <code class="language-plaintext highlighter-rouge">neovim</code>). Then I’d
follow the built-in tutorial by typing <code class="language-plaintext highlighter-rouge">:Tutor</code>. The first online resource given
at the bottom of the tutorial, <a href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/">“Learn Vim
Progressively”</a> is also great—it’s how I first
started.</p>

<h2 id="fzf">FZF</h2>

<p>FZF is a fuzzy-finder for the shell that you can use in a bunch of different
ways, like…</p>

<h3 id="finding-files-while-also-obeying-your-gitignore">Finding files (while also obeying your <code class="language-plaintext highlighter-rouge">.gitignore</code>)<sup id="fnref:vim-color-note" role="doc-noteref"><a href="#fn:vim-color-note" class="footnote" rel="footnote">7</a></sup></h3>
<script src="https://asciinema.org/a/28rDzTqI5nEE9mM89DKZmf5Zo.js" id="asciicast-28rDzTqI5nEE9mM89DKZmf5Zo" async=""></script>

<h3 id="finding-git-commits">Finding git commits</h3>
<script src="https://asciinema.org/a/xYrk74sFKjQXzGKEPJSrdypXs.js" id="asciicast-xYrk74sFKjQXzGKEPJSrdypXs" async=""></script>

<h3 id="finding-old-commands">Finding old commands</h3>
<p>I couldn’t manage to record this one without any potentially sensitive
information, but it works as you might expect.</p>

<p>At its core, FZF is just a way of filtering data in a human-friendly way. You
can pipe anything in and get the same fuzzy-find interface
(e.g. <code class="language-plaintext highlighter-rouge">cat file.txt | fzf</code>).</p>

<h3 id="how-to-get-started-2">How to get started</h3>

<p>Once again, if you can, just use Homebrew.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install fzf
</code></pre></div></div>

<p>See <a href="https://github.com/junegunn/fzf#using-homebrew-or-linuxbrew">the project’s installation instructions</a> for
details, including howt to integrate FZF with tmux and vim. These integrations
work incredibly well so I’d highly recommend setting that up.</p>

<div style="text-align: center;">•••</div>

<p>That’s it for now! More posts on this stuff to come, I’m sure.</p>

<!--footnotes & references-->

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://ergonomics.ucla.edu/injuries-and-prevention/eye-strain.html">https://ergonomics.ucla.edu/injuries-and-prevention/eye-strain.html</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="https://lifehacker.com/5818056/how-do-i-prevent-eyestrain">https://lifehacker.com/5818056/how-do-i-prevent-eyestrain</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:4" role="doc-endnote">

      <p>This isn’t a cure-all for repetitive strain injuries. Stretching and
regular breaks are more important. <a href="#fnref:4" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:wizardry" role="doc-endnote">

      <p>It can be a great way to learn tricks
when you see someone do some keyboard wizardry and you ask “How did you do that!?” <a href="#fnref:wizardry" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>The main reason for using it over the default macOS Terminal is for 256 color support. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:cycle" role="doc-endnote">

      <p>Just as a heads up: you can cycle through open applications with
<kbd>&#8984;</kbd>+<kbd>tab</kbd> and open windows for your current
application with <kbd>&#8984;</kbd>+<kbd>`</kbd>. <a href="#fnref:cycle" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:vim-color-note" role="doc-endnote">

      <p>I’m not sure why the colors on this recording are inaccurate,
but I assure you Vim on my machine is quite colorful. I use the colorscheme
<a href="https://github.com/junegunn/seoul256.vim">seoul256</a>. <a href="#fnref:vim-color-note" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[Core philosophy]]></summary></entry></feed>